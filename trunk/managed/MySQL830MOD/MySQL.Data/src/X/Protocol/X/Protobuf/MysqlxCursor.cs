// Copyright (c) 2022, 2023, Oracle and/or its affiliates.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License, version 2.0, as
// published by the Free Software Foundation.
//
// This program is also distributed with certain software (including
// but not limited to OpenSSL) that is licensed under separate terms,
// as designated in a particular file or component or in included license
// documentation. The authors of MySQL hereby grant you an
// additional permission to link the program and your derivative works
// with the separately licensed software that they have included with
// MySQL.
//
// Without limiting anything contained in the foregoing, this file,
// which is part of MySQL Connector/NET, is also subject to the
// Universal FOSS Exception, version 1.0, a copy of which can be found at
// http://oss.oracle.com/licenses/universal-foss-exception.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License, version 2.0, for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mysqlx_cursor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Cursor
{

  /// <summary>Holder for reflection information generated from mysqlx_cursor.proto</summary>
  public static partial class MysqlxCursorReflection
  {

    #region Descriptor
    /// <summary>File descriptor for mysqlx_cursor.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MysqlxCursorReflection()
    {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNteXNxbHhfY3Vyc29yLnByb3RvEg1NeXNxbHguQ3Vyc29yGgxteXNxbHgu",
            "cHJvdG8aFG15c3FseF9wcmVwYXJlLnByb3RvIvgBCgRPcGVuEhEKCWN1cnNv",
            "cl9pZBgBIAIoDRIuCgRzdG10GAQgAigLMiAuTXlzcWx4LkN1cnNvci5PcGVu",
            "Lk9uZU9mTWVzc2FnZRISCgpmZXRjaF9yb3dzGAUgASgEGpIBCgxPbmVPZk1l",
            "c3NhZ2USMwoEdHlwZRgBIAIoDjIlLk15c3FseC5DdXJzb3IuT3Blbi5PbmVP",
            "Zk1lc3NhZ2UuVHlwZRIwCg9wcmVwYXJlX2V4ZWN1dGUYAiABKAsyFy5NeXNx",
            "bHguUHJlcGFyZS5FeGVjdXRlIhsKBFR5cGUSEwoPUFJFUEFSRV9FWEVDVVRF",
            "EAA6BIjqMCsiNAoFRmV0Y2gSEQoJY3Vyc29yX2lkGAEgAigNEhIKCmZldGNo",
            "X3Jvd3MYBSABKAQ6BIjqMC0iIAoFQ2xvc2USEQoJY3Vyc29yX2lkGAEgAigN",
            "OgSI6jAsQhkKF2NvbS5teXNxbC5jai54LnByb3RvYnVm"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mysqlx.MysqlxReflection.Descriptor, global::Mysqlx.Prepare.MysqlxPrepareReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Cursor.Open), global::Mysqlx.Cursor.Open.Parser, new[]{ "CursorId", "Stmt", "FetchRows" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Cursor.Open.Types.OneOfMessage), global::Mysqlx.Cursor.Open.Types.OneOfMessage.Parser, new[]{ "Type", "PrepareExecute" }, null, new[]{ typeof(global::Mysqlx.Cursor.Open.Types.OneOfMessage.Types.Type) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Cursor.Fetch), global::Mysqlx.Cursor.Fetch.Parser, new[]{ "CursorId", "FetchRows" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Cursor.Close), global::Mysqlx.Cursor.Close.Parser, new[]{ "CursorId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  ///Open a cursor
  ///
  ///@startuml
  ///client -> server: Open
  ///alt Success
  ///... none or partial Resultsets or full Resultsets ...
  ///client &lt;- server: StmtExecuteOk
  ///else Failure
  ///client &lt;- server: Error
  ///end alt
  ///@enduml
  ///
  ///@returns @ref Mysqlx::Ok
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Open : pb::IMessage<Open>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Open> _parser = new pb::MessageParser<Open>(() => new Open());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Open> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Cursor.MysqlxCursorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Open()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Open(Open other) : this()
    {
      _hasBits0 = other._hasBits0;
      cursorId_ = other.cursorId_;
      stmt_ = other.stmt_ != null ? other.stmt_.Clone() : null;
      fetchRows_ = other.fetchRows_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Open Clone()
    {
      return new Open(this);
    }

    /// <summary>Field number for the "cursor_id" field.</summary>
    public const int CursorIdFieldNumber = 1;
    private readonly static uint CursorIdDefaultValue = 0;

    private uint cursorId_;
    /// <summary>
    ///* client-side assigned cursor ID; the ID is going to represent
    ///the new cursor and assigned to it the statement 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CursorId
    {
      get { if ((_hasBits0 & 1) != 0) { return cursorId_; } else { return CursorIdDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        cursorId_ = value;
      }
    }
    /// <summary>Gets whether the "cursor_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCursorId
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cursor_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCursorId()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stmt" field.</summary>
    public const int StmtFieldNumber = 4;
    private global::Mysqlx.Cursor.Open.Types.OneOfMessage stmt_;
    /// <summary>
    ///* statement for which the resultset is going to be iterated through by the cursor 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Cursor.Open.Types.OneOfMessage Stmt
    {
      get { return stmt_; }
      set
      {
        stmt_ = value;
      }
    }

    /// <summary>Field number for the "fetch_rows" field.</summary>
    public const int FetchRowsFieldNumber = 5;
    private readonly static ulong FetchRowsDefaultValue = 0UL;

    private ulong fetchRows_;
    /// <summary>
    ///* number of rows that should be retrieved from sequential cursor 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FetchRows
    {
      get { if ((_hasBits0 & 2) != 0) { return fetchRows_; } else { return FetchRowsDefaultValue; } }
      set
      {
        _hasBits0 |= 2;
        fetchRows_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_rows" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFetchRows
    {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "fetch_rows" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFetchRows()
    {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Open);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Open other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (CursorId != other.CursorId) return false;
      if (!object.Equals(Stmt, other.Stmt)) return false;
      if (FetchRows != other.FetchRows) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (HasCursorId) hash ^= CursorId.GetHashCode();
      if (stmt_ != null) hash ^= Stmt.GetHashCode();
      if (HasFetchRows) hash ^= FetchRows.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (HasCursorId) {
        output.WriteRawTag(8);
        output.WriteUInt32(CursorId);
      }
      if (stmt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Stmt);
      }
      if (HasFetchRows) {
        output.WriteRawTag(40);
        output.WriteUInt64(FetchRows);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (HasCursorId)
      {
        output.WriteRawTag(8);
        output.WriteUInt32(CursorId);
      }
      if (stmt_ != null)
      {
        output.WriteRawTag(34);
        output.WriteMessage(Stmt);
      }
      if (HasFetchRows)
      {
        output.WriteRawTag(40);
        output.WriteUInt64(FetchRows);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (HasCursorId)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CursorId);
      }
      if (stmt_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stmt);
      }
      if (HasFetchRows)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FetchRows);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Open other)
    {
      if (other == null)
      {
        return;
      }
      if (other.HasCursorId)
      {
        CursorId = other.CursorId;
      }
      if (other.stmt_ != null)
      {
        if (stmt_ == null)
        {
          Stmt = new global::Mysqlx.Cursor.Open.Types.OneOfMessage();
        }
        Stmt.MergeFrom(other.Stmt);
      }
      if (other.HasFetchRows)
      {
        FetchRows = other.FetchRows;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CursorId = input.ReadUInt32();
            break;
          }
          case 34: {
            if (stmt_ == null) {
              Stmt = new global::Mysqlx.Cursor.Open.Types.OneOfMessage();
            }
            input.ReadMessage(Stmt);
            break;
          }
          case 40: {
            FetchRows = input.ReadUInt64();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8:
            {
              CursorId = input.ReadUInt32();
              break;
            }
          case 34:
            {
              if (stmt_ == null)
              {
                Stmt = new global::Mysqlx.Cursor.Open.Types.OneOfMessage();
              }
              input.ReadMessage(Stmt);
              break;
            }
          case 40:
            {
              FetchRows = input.ReadUInt64();
              break;
            }
        }
      }
    }
#endif

    #region Nested types
    /// <summary>Container for nested types declared in the Open message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types
    {
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class OneOfMessage : pb::IMessage<OneOfMessage>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
#endif
      {
        private static readonly pb::MessageParser<OneOfMessage> _parser = new pb::MessageParser<OneOfMessage>(() => new OneOfMessage());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<OneOfMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor
        {
          get { return global::Mysqlx.Cursor.Open.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OneOfMessage()
        {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OneOfMessage(OneOfMessage other) : this()
        {
          _hasBits0 = other._hasBits0;
          type_ = other.type_;
          prepareExecute_ = other.prepareExecute_ != null ? other.prepareExecute_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OneOfMessage Clone()
        {
          return new OneOfMessage(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::Mysqlx.Cursor.Open.Types.OneOfMessage.Types.Type TypeDefaultValue = global::Mysqlx.Cursor.Open.Types.OneOfMessage.Types.Type.PrepareExecute;

        private global::Mysqlx.Cursor.Open.Types.OneOfMessage.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mysqlx.Cursor.Open.Types.OneOfMessage.Types.Type Type
        {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set
          {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasType
        {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearType()
        {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "prepare_execute" field.</summary>
        public const int PrepareExecuteFieldNumber = 2;
        private global::Mysqlx.Prepare.Execute prepareExecute_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mysqlx.Prepare.Execute PrepareExecute
        {
          get { return prepareExecute_; }
          set
          {
            prepareExecute_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other)
        {
          return Equals(other as OneOfMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(OneOfMessage other)
        {
          if (ReferenceEquals(other, null))
          {
            return false;
          }
          if (ReferenceEquals(other, this))
          {
            return true;
          }
          if (Type != other.Type) return false;
          if (!object.Equals(PrepareExecute, other.PrepareExecute)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode()
        {
          int hash = 1;
          if (HasType) hash ^= Type.GetHashCode();
          if (prepareExecute_ != null) hash ^= PrepareExecute.GetHashCode();
          if (_unknownFields != null)
          {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString()
        {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
#else
          if (HasType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (prepareExecute_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(PrepareExecute);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
          if (HasType)
          {
            output.WriteRawTag(8);
            output.WriteEnum((int)Type);
          }
          if (prepareExecute_ != null)
          {
            output.WriteRawTag(18);
            output.WriteMessage(PrepareExecute);
          }
          if (_unknownFields != null)
          {
            _unknownFields.WriteTo(ref output);
          }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize()
        {
          int size = 0;
          if (HasType)
          {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
          }
          if (prepareExecute_ != null)
          {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrepareExecute);
          }
          if (_unknownFields != null)
          {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(OneOfMessage other)
        {
          if (other == null)
          {
            return;
          }
          if (other.HasType)
          {
            Type = other.Type;
          }
          if (other.prepareExecute_ != null)
          {
            if (prepareExecute_ == null)
            {
              PrepareExecute = new global::Mysqlx.Prepare.Execute();
            }
            PrepareExecute.MergeFrom(other.PrepareExecute);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
#else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Mysqlx.Cursor.Open.Types.OneOfMessage.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                if (prepareExecute_ == null) {
                  PrepareExecute = new global::Mysqlx.Prepare.Execute();
                }
                input.ReadMessage(PrepareExecute);
                break;
              }
            }
          }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
          uint tag;
          while ((tag = input.ReadTag()) != 0)
          {
            switch (tag)
            {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8:
                {
                  Type = (global::Mysqlx.Cursor.Open.Types.OneOfMessage.Types.Type)input.ReadEnum();
                  break;
                }
              case 18:
                {
                  if (prepareExecute_ == null)
                  {
                    PrepareExecute = new global::Mysqlx.Prepare.Execute();
                  }
                  input.ReadMessage(PrepareExecute);
                  break;
                }
            }
          }
        }
#endif

        #region Nested types
        /// <summary>Container for nested types declared in the OneOfMessage message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types
        {
          public enum Type
          {
            [pbr::OriginalName("PREPARE_EXECUTE")] PrepareExecute = 0,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  ///Fetch next portion of data from a cursor
  ///
  ///@startuml
  ///client -> server: Fetch
  ///alt Success
  ///... none or partial Resultsets or full Resultsets ...
  ///client &lt;- server: StmtExecuteOk
  ///else
  ///client &lt;- server: Error
  ///end
  ///@enduml
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Fetch : pb::IMessage<Fetch>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Fetch> _parser = new pb::MessageParser<Fetch>(() => new Fetch());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Fetch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Cursor.MysqlxCursorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fetch()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fetch(Fetch other) : this()
    {
      _hasBits0 = other._hasBits0;
      cursorId_ = other.cursorId_;
      fetchRows_ = other.fetchRows_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Fetch Clone()
    {
      return new Fetch(this);
    }

    /// <summary>Field number for the "cursor_id" field.</summary>
    public const int CursorIdFieldNumber = 1;
    private readonly static uint CursorIdDefaultValue = 0;

    private uint cursorId_;
    /// <summary>
    ///* client-side assigned cursor ID; must be already open 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CursorId
    {
      get { if ((_hasBits0 & 1) != 0) { return cursorId_; } else { return CursorIdDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        cursorId_ = value;
      }
    }
    /// <summary>Gets whether the "cursor_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCursorId
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cursor_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCursorId()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "fetch_rows" field.</summary>
    public const int FetchRowsFieldNumber = 5;
    private readonly static ulong FetchRowsDefaultValue = 0UL;

    private ulong fetchRows_;
    /// <summary>
    ///* number of rows that should be retrieved from sequential cursor 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FetchRows
    {
      get { if ((_hasBits0 & 2) != 0) { return fetchRows_; } else { return FetchRowsDefaultValue; } }
      set
      {
        _hasBits0 |= 2;
        fetchRows_ = value;
      }
    }
    /// <summary>Gets whether the "fetch_rows" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFetchRows
    {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "fetch_rows" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFetchRows()
    {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Fetch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Fetch other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (CursorId != other.CursorId) return false;
      if (FetchRows != other.FetchRows) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (HasCursorId) hash ^= CursorId.GetHashCode();
      if (HasFetchRows) hash ^= FetchRows.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (HasCursorId) {
        output.WriteRawTag(8);
        output.WriteUInt32(CursorId);
      }
      if (HasFetchRows) {
        output.WriteRawTag(40);
        output.WriteUInt64(FetchRows);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (HasCursorId)
      {
        output.WriteRawTag(8);
        output.WriteUInt32(CursorId);
      }
      if (HasFetchRows)
      {
        output.WriteRawTag(40);
        output.WriteUInt64(FetchRows);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (HasCursorId)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CursorId);
      }
      if (HasFetchRows)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FetchRows);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Fetch other)
    {
      if (other == null)
      {
        return;
      }
      if (other.HasCursorId)
      {
        CursorId = other.CursorId;
      }
      if (other.HasFetchRows)
      {
        FetchRows = other.FetchRows;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CursorId = input.ReadUInt32();
            break;
          }
          case 40: {
            FetchRows = input.ReadUInt64();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8:
            {
              CursorId = input.ReadUInt32();
              break;
            }
          case 40:
            {
              FetchRows = input.ReadUInt64();
              break;
            }
        }
      }
    }
#endif

  }

  /// <summary>
  ///*
  ///Close cursor
  ///
  ///@startuml
  ///client -> server: Close
  ///alt Success
  ///client &lt;- server: Ok
  ///else Failure
  ///client &lt;- server: Error
  ///end
  ///@enduml
  ///
  ///@returns @ref Mysqlx::Ok or @ref Mysqlx::Error
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Close : pb::IMessage<Close>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Close> _parser = new pb::MessageParser<Close>(() => new Close());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Close> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Cursor.MysqlxCursorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Close()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Close(Close other) : this()
    {
      _hasBits0 = other._hasBits0;
      cursorId_ = other.cursorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Close Clone()
    {
      return new Close(this);
    }

    /// <summary>Field number for the "cursor_id" field.</summary>
    public const int CursorIdFieldNumber = 1;
    private readonly static uint CursorIdDefaultValue = 0;

    private uint cursorId_;
    /// <summary>
    ///* client-side assigned cursor ID; must be allocated/open 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CursorId
    {
      get { if ((_hasBits0 & 1) != 0) { return cursorId_; } else { return CursorIdDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        cursorId_ = value;
      }
    }
    /// <summary>Gets whether the "cursor_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCursorId
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "cursor_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCursorId()
    {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Close);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Close other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (CursorId != other.CursorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (HasCursorId) hash ^= CursorId.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (HasCursorId) {
        output.WriteRawTag(8);
        output.WriteUInt32(CursorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (HasCursorId)
      {
        output.WriteRawTag(8);
        output.WriteUInt32(CursorId);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (HasCursorId)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CursorId);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Close other)
    {
      if (other == null)
      {
        return;
      }
      if (other.HasCursorId)
      {
        CursorId = other.CursorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CursorId = input.ReadUInt32();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8:
            {
              CursorId = input.ReadUInt32();
              break;
            }
        }
      }
    }
#endif

  }

  #endregion

}

#endregion Designer generated code
