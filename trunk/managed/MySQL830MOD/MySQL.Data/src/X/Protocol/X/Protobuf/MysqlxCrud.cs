// Copyright (c) 2022, 2023, Oracle and/or its affiliates.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License, version 2.0, as
// published by the Free Software Foundation.
//
// This program is also distributed with certain software (including
// but not limited to OpenSSL) that is licensed under separate terms,
// as designated in a particular file or component or in included license
// documentation. The authors of MySQL hereby grant you an
// additional permission to link the program and your derivative works
// with the separately licensed software that they have included with
// MySQL.
//
// Without limiting anything contained in the foregoing, this file,
// which is part of MySQL Connector/NET, is also subject to the
// Universal FOSS Exception, version 1.0, a copy of which can be found at
// http://oss.oracle.com/licenses/universal-foss-exception.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License, version 2.0, for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mysqlx_crud.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Crud
{

  /// <summary>Holder for reflection information generated from mysqlx_crud.proto</summary>
  public static partial class MysqlxCrudReflection
  {

    #region Descriptor
    /// <summary>File descriptor for mysqlx_crud.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MysqlxCrudReflection()
    {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFteXNxbHhfY3J1ZC5wcm90bxILTXlzcWx4LkNydWQaDG15c3FseC5wcm90",
            "bxoRbXlzcWx4X2V4cHIucHJvdG8aFm15c3FseF9kYXRhdHlwZXMucHJvdG8i",
            "WwoGQ29sdW1uEgwKBG5hbWUYASABKAkSDQoFYWxpYXMYAiABKAkSNAoNZG9j",
            "dW1lbnRfcGF0aBgDIAMoCzIdLk15c3FseC5FeHByLkRvY3VtZW50UGF0aEl0",
            "ZW0iPgoKUHJvamVjdGlvbhIhCgZzb3VyY2UYASACKAsyES5NeXNxbHguRXhw",
            "ci5FeHByEg0KBWFsaWFzGAIgASgJIioKCkNvbGxlY3Rpb24SDAoEbmFtZRgB",
            "IAIoCRIOCgZzY2hlbWEYAiABKAkiKgoFTGltaXQSEQoJcm93X2NvdW50GAEg",
            "AigEEg4KBm9mZnNldBgCIAEoBCJUCglMaW1pdEV4cHISJAoJcm93X2NvdW50",
            "GAEgAigLMhEuTXlzcWx4LkV4cHIuRXhwchIhCgZvZmZzZXQYAiABKAsyES5N",
            "eXNxbHguRXhwci5FeHByIn4KBU9yZGVyEh8KBGV4cHIYASACKAsyES5NeXNx",
            "bHguRXhwci5FeHByEjQKCWRpcmVjdGlvbhgCIAEoDjIcLk15c3FseC5DcnVk",
            "Lk9yZGVyLkRpcmVjdGlvbjoDQVNDIh4KCURpcmVjdGlvbhIHCgNBU0MQARII",
            "CgRERVNDEAIirAIKD1VwZGF0ZU9wZXJhdGlvbhItCgZzb3VyY2UYASACKAsy",
            "HS5NeXNxbHguRXhwci5Db2x1bW5JZGVudGlmaWVyEjoKCW9wZXJhdGlvbhgC",
            "IAIoDjInLk15c3FseC5DcnVkLlVwZGF0ZU9wZXJhdGlvbi5VcGRhdGVUeXBl",
            "EiAKBXZhbHVlGAMgASgLMhEuTXlzcWx4LkV4cHIuRXhwciKLAQoKVXBkYXRl",
            "VHlwZRIHCgNTRVQQARIPCgtJVEVNX1JFTU9WRRACEgwKCElURU1fU0VUEAMS",
            "EAoMSVRFTV9SRVBMQUNFEAQSDgoKSVRFTV9NRVJHRRAFEhAKDEFSUkFZX0lO",
            "U0VSVBAGEhAKDEFSUkFZX0FQUEVORBAHEg8KC01FUkdFX1BBVENIEAgi6gQK",
            "BEZpbmQSKwoKY29sbGVjdGlvbhgCIAIoCzIXLk15c3FseC5DcnVkLkNvbGxl",
            "Y3Rpb24SKgoKZGF0YV9tb2RlbBgDIAEoDjIWLk15c3FseC5DcnVkLkRhdGFN",
            "b2RlbBIrCgpwcm9qZWN0aW9uGAQgAygLMhcuTXlzcWx4LkNydWQuUHJvamVj",
            "dGlvbhImCgRhcmdzGAsgAygLMhguTXlzcWx4LkRhdGF0eXBlcy5TY2FsYXIS",
            "IwoIY3JpdGVyaWEYBSABKAsyES5NeXNxbHguRXhwci5FeHByEiEKBWxpbWl0",
            "GAYgASgLMhIuTXlzcWx4LkNydWQuTGltaXQSIQoFb3JkZXIYByADKAsyEi5N",
            "eXNxbHguQ3J1ZC5PcmRlchIjCghncm91cGluZxgIIAMoCzIRLk15c3FseC5F",
            "eHByLkV4cHISLAoRZ3JvdXBpbmdfY3JpdGVyaWEYCSABKAsyES5NeXNxbHgu",
            "RXhwci5FeHByEioKB2xvY2tpbmcYDCABKA4yGS5NeXNxbHguQ3J1ZC5GaW5k",
            "LlJvd0xvY2sSOQoPbG9ja2luZ19vcHRpb25zGA0gASgOMiAuTXlzcWx4LkNy",
            "dWQuRmluZC5Sb3dMb2NrT3B0aW9ucxIqCgpsaW1pdF9leHByGA4gASgLMhYu",
            "TXlzcWx4LkNydWQuTGltaXRFeHByIi4KB1Jvd0xvY2sSDwoLU0hBUkVEX0xP",
            "Q0sQARISCg5FWENMVVNJVkVfTE9DSxACIi0KDlJvd0xvY2tPcHRpb25zEgoK",
            "Bk5PV0FJVBABEg8KC1NLSVBfTE9DS0VEEAI6BIjqMBEiqAIKBkluc2VydBIr",
            "Cgpjb2xsZWN0aW9uGAEgAigLMhcuTXlzcWx4LkNydWQuQ29sbGVjdGlvbhIq",
            "CgpkYXRhX21vZGVsGAIgASgOMhYuTXlzcWx4LkNydWQuRGF0YU1vZGVsEicK",
            "CnByb2plY3Rpb24YAyADKAsyEy5NeXNxbHguQ3J1ZC5Db2x1bW4SKQoDcm93",
            "GAQgAygLMhwuTXlzcWx4LkNydWQuSW5zZXJ0LlR5cGVkUm93EiYKBGFyZ3MY",
            "BSADKAsyGC5NeXNxbHguRGF0YXR5cGVzLlNjYWxhchIVCgZ1cHNlcnQYBiAB",
            "KAg6BWZhbHNlGiwKCFR5cGVkUm93EiAKBWZpZWxkGAEgAygLMhEuTXlzcWx4",
            "LkV4cHIuRXhwcjoEiOowEiLXAgoGVXBkYXRlEisKCmNvbGxlY3Rpb24YAiAC",
            "KAsyFy5NeXNxbHguQ3J1ZC5Db2xsZWN0aW9uEioKCmRhdGFfbW9kZWwYAyAB",
            "KA4yFi5NeXNxbHguQ3J1ZC5EYXRhTW9kZWwSIwoIY3JpdGVyaWEYBCABKAsy",
            "ES5NeXNxbHguRXhwci5FeHByEiEKBWxpbWl0GAUgASgLMhIuTXlzcWx4LkNy",
            "dWQuTGltaXQSIQoFb3JkZXIYBiADKAsyEi5NeXNxbHguQ3J1ZC5PcmRlchIv",
            "CglvcGVyYXRpb24YByADKAsyHC5NeXNxbHguQ3J1ZC5VcGRhdGVPcGVyYXRp",
            "b24SJgoEYXJncxgIIAMoCzIYLk15c3FseC5EYXRhdHlwZXMuU2NhbGFyEioK",
            "CmxpbWl0X2V4cHIYCSABKAsyFi5NeXNxbHguQ3J1ZC5MaW1pdEV4cHI6BIjq",
            "MBMipgIKBkRlbGV0ZRIrCgpjb2xsZWN0aW9uGAEgAigLMhcuTXlzcWx4LkNy",
            "dWQuQ29sbGVjdGlvbhIqCgpkYXRhX21vZGVsGAIgASgOMhYuTXlzcWx4LkNy",
            "dWQuRGF0YU1vZGVsEiMKCGNyaXRlcmlhGAMgASgLMhEuTXlzcWx4LkV4cHIu",
            "RXhwchIhCgVsaW1pdBgEIAEoCzISLk15c3FseC5DcnVkLkxpbWl0EiEKBW9y",
            "ZGVyGAUgAygLMhIuTXlzcWx4LkNydWQuT3JkZXISJgoEYXJncxgGIAMoCzIY",
            "Lk15c3FseC5EYXRhdHlwZXMuU2NhbGFyEioKCmxpbWl0X2V4cHIYByABKAsy",
            "Fi5NeXNxbHguQ3J1ZC5MaW1pdEV4cHI6BIjqMBQiwgIKCkNyZWF0ZVZpZXcS",
            "KwoKY29sbGVjdGlvbhgBIAIoCzIXLk15c3FseC5DcnVkLkNvbGxlY3Rpb24S",
            "DwoHZGVmaW5lchgCIAEoCRI4CglhbGdvcml0aG0YAyABKA4yGi5NeXNxbHgu",
            "Q3J1ZC5WaWV3QWxnb3JpdGhtOglVTkRFRklORUQSNwoIc2VjdXJpdHkYBCAB",
            "KA4yHC5NeXNxbHguQ3J1ZC5WaWV3U3FsU2VjdXJpdHk6B0RFRklORVISKwoF",
            "Y2hlY2sYBSABKA4yHC5NeXNxbHguQ3J1ZC5WaWV3Q2hlY2tPcHRpb24SDgoG",
            "Y29sdW1uGAYgAygJEh8KBHN0bXQYByACKAsyES5NeXNxbHguQ3J1ZC5GaW5k",
            "Eh8KEHJlcGxhY2VfZXhpc3RpbmcYCCABKAg6BWZhbHNlOgSI6jAeIo0CCgpN",
            "b2RpZnlWaWV3EisKCmNvbGxlY3Rpb24YASACKAsyFy5NeXNxbHguQ3J1ZC5D",
            "b2xsZWN0aW9uEg8KB2RlZmluZXIYAiABKAkSLQoJYWxnb3JpdGhtGAMgASgO",
            "MhouTXlzcWx4LkNydWQuVmlld0FsZ29yaXRobRIuCghzZWN1cml0eRgEIAEo",
            "DjIcLk15c3FseC5DcnVkLlZpZXdTcWxTZWN1cml0eRIrCgVjaGVjaxgFIAEo",
            "DjIcLk15c3FseC5DcnVkLlZpZXdDaGVja09wdGlvbhIOCgZjb2x1bW4YBiAD",
            "KAkSHwoEc3RtdBgHIAEoCzIRLk15c3FseC5DcnVkLkZpbmQ6BIjqMB8iVwoI",
            "RHJvcFZpZXcSKwoKY29sbGVjdGlvbhgBIAIoCzIXLk15c3FseC5DcnVkLkNv",
            "bGxlY3Rpb24SGAoJaWZfZXhpc3RzGAIgASgIOgVmYWxzZToEiOowICokCglE",
            "YXRhTW9kZWwSDAoIRE9DVU1FTlQQARIJCgVUQUJMRRACKjgKDVZpZXdBbGdv",
            "cml0aG0SDQoJVU5ERUZJTkVEEAESCQoFTUVSR0UQAhINCglURU1QVEFCTEUQ",
            "AyorCg9WaWV3U3FsU2VjdXJpdHkSCwoHSU5WT0tFUhABEgsKB0RFRklORVIQ",
            "AioqCg9WaWV3Q2hlY2tPcHRpb24SCQoFTE9DQUwQARIMCghDQVNDQURFRBAC",
            "QhkKF2NvbS5teXNxbC5jai54LnByb3RvYnVm"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mysqlx.MysqlxReflection.Descriptor, global::Mysqlx.Expr.MysqlxExprReflection.Descriptor, global::Mysqlx.Datatypes.MysqlxDatatypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] { typeof(global::Mysqlx.Crud.DataModel), typeof(global::Mysqlx.Crud.ViewAlgorithm), typeof(global::Mysqlx.Crud.ViewSqlSecurity), typeof(global::Mysqlx.Crud.ViewCheckOption), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Column), global::Mysqlx.Crud.Column.Parser, new[]{ "Name", "Alias", "DocumentPath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Projection), global::Mysqlx.Crud.Projection.Parser, new[]{ "Source", "Alias" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Collection), global::Mysqlx.Crud.Collection.Parser, new[]{ "Name", "Schema" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Limit), global::Mysqlx.Crud.Limit.Parser, new[]{ "RowCount", "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.LimitExpr), global::Mysqlx.Crud.LimitExpr.Parser, new[]{ "RowCount", "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Order), global::Mysqlx.Crud.Order.Parser, new[]{ "Expr", "Direction" }, null, new[]{ typeof(global::Mysqlx.Crud.Order.Types.Direction) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.UpdateOperation), global::Mysqlx.Crud.UpdateOperation.Parser, new[]{ "Source", "Operation", "Value" }, null, new[]{ typeof(global::Mysqlx.Crud.UpdateOperation.Types.UpdateType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Find), global::Mysqlx.Crud.Find.Parser, new[]{ "Collection", "DataModel", "Projection", "Args", "Criteria", "Limit", "Order", "Grouping", "GroupingCriteria", "Locking", "LockingOptions", "LimitExpr" }, null, new[]{ typeof(global::Mysqlx.Crud.Find.Types.RowLock), typeof(global::Mysqlx.Crud.Find.Types.RowLockOptions) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Insert), global::Mysqlx.Crud.Insert.Parser, new[]{ "Collection", "DataModel", "Projection", "Row", "Args", "Upsert" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Insert.Types.TypedRow), global::Mysqlx.Crud.Insert.Types.TypedRow.Parser, new[]{ "Field" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Update), global::Mysqlx.Crud.Update.Parser, new[]{ "Collection", "DataModel", "Criteria", "Limit", "Order", "Operation", "Args", "LimitExpr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.Delete), global::Mysqlx.Crud.Delete.Parser, new[]{ "Collection", "DataModel", "Criteria", "Limit", "Order", "Args", "LimitExpr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.CreateView), global::Mysqlx.Crud.CreateView.Parser, new[]{ "Collection", "Definer", "Algorithm", "Security", "Check", "Column", "Stmt", "ReplaceExisting" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.ModifyView), global::Mysqlx.Crud.ModifyView.Parser, new[]{ "Collection", "Definer", "Algorithm", "Security", "Check", "Column", "Stmt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Crud.DropView), global::Mysqlx.Crud.DropView.Parser, new[]{ "Collection", "IfExists" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  ///DataModel to use for filters, names, ...
  /// </summary>
  public enum DataModel
  {
    [pbr::OriginalName("DOCUMENT")] Document = 1,
    [pbr::OriginalName("TABLE")] Table = 2,
  }

  /// <summary>
  ///*
  ///ViewAlgorithm defines how MySQL Server processes the view
  /// </summary>
  public enum ViewAlgorithm
  {
    /// <summary>
    ///* MySQL chooses which algorithm to use 
    /// </summary>
    [pbr::OriginalName("UNDEFINED")] Undefined = 1,
    /// <summary>
    ///* the text of a statement that refers to the view and the view
    ///definition are merged 
    /// </summary>
    [pbr::OriginalName("MERGE")] Merge = 2,
    /// <summary>
    ///* the view are retrieved into a temporary table 
    /// </summary>
    [pbr::OriginalName("TEMPTABLE")] Temptable = 3,
  }

  /// <summary>
  ///*
  ///ViewSqlSecurity defines the security context in which the view is going to be
  ///executed; this means that VIEW can be executed with current user permissions or
  ///with permissions of the user who defined the VIEW
  /// </summary>
  public enum ViewSqlSecurity
  {
    /// <summary>
    ///* use current user permissions 
    /// </summary>
    [pbr::OriginalName("INVOKER")] Invoker = 1,
    /// <summary>
    ///* use permissions of the user who defined the VIEW 
    /// </summary>
    [pbr::OriginalName("DEFINER")] Definer = 2,
  }

  /// <summary>
  ///*
  ///ViewCheckOption limits the write operations done on a `VIEW`
  ///(`INSERT`, `UPDATE`, `DELETE`) to rows in which the `WHERE` clause is `TRUE`
  /// </summary>
  public enum ViewCheckOption
  {
    /// <summary>
    ///* the view WHERE clause is checked, but no underlying views are checked 
    /// </summary>
    [pbr::OriginalName("LOCAL")] Local = 1,
    /// <summary>
    ///* the view WHERE clause is checked, then checking recurses
    ///to underlying views 
    /// </summary>
    [pbr::OriginalName("CASCADED")] Cascaded = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this()
    {
      name_ = other.name_;
      alias_ = other.alias_;
      documentPath_ = other.documentPath_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone()
    {
      return new Column(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name
    {
      get { return name_ ?? NameDefaultValue; }
      set
      {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName
    {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName()
    {
      name_ = null;
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 2;
    private readonly static string AliasDefaultValue = "";

    private string alias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Alias
    {
      get { return alias_ ?? AliasDefaultValue; }
      set
      {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "alias" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlias
    {
      get { return alias_ != null; }
    }
    /// <summary>Clears the value of the "alias" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlias()
    {
      alias_ = null;
    }

    /// <summary>Field number for the "document_path" field.</summary>
    public const int DocumentPathFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Mysqlx.Expr.DocumentPathItem> _repeated_documentPath_codec
        = pb::FieldCodec.ForMessage(26, global::Mysqlx.Expr.DocumentPathItem.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Expr.DocumentPathItem> documentPath_ = new pbc::RepeatedField<global::Mysqlx.Expr.DocumentPathItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Expr.DocumentPathItem> DocumentPath
    {
      get { return documentPath_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (Name != other.Name) return false;
      if (Alias != other.Alias) return false;
      if (!documentPath_.Equals(other.documentPath_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasAlias) hash ^= Alias.GetHashCode();
      hash ^= documentPath_.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasAlias) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      documentPath_.WriteTo(output, _repeated_documentPath_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (HasName)
      {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasAlias)
      {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      documentPath_.WriteTo(ref output, _repeated_documentPath_codec);
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (HasName)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasAlias)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += documentPath_.CalculateSize(_repeated_documentPath_codec);
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other)
    {
      if (other == null)
      {
        return;
      }
      if (other.HasName)
      {
        Name = other.Name;
      }
      if (other.HasAlias)
      {
        Alias = other.Alias;
      }
      documentPath_.Add(other.documentPath_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
          case 26: {
            documentPath_.AddEntriesFrom(input, _repeated_documentPath_codec);
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              Name = input.ReadString();
              break;
            }
          case 18:
            {
              Alias = input.ReadString();
              break;
            }
          case 26:
            {
              documentPath_.AddEntriesFrom(ref input, _repeated_documentPath_codec);
              break;
            }
        }
      }
    }
#endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Projection : pb::IMessage<Projection>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Projection> _parser = new pb::MessageParser<Projection>(() => new Projection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Projection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Projection()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Projection(Projection other) : this()
    {
      source_ = other.source_ != null ? other.source_.Clone() : null;
      alias_ = other.alias_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Projection Clone()
    {
      return new Projection(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::Mysqlx.Expr.Expr source_;
    /// <summary>
    ///* the expression identifying an element from the source data,
    ///which can include a column identifier or any expression 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.Expr Source
    {
      get { return source_; }
      set
      {
        source_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 2;
    private readonly static string AliasDefaultValue = "";

    private string alias_;
    /// <summary>
    ///* optional alias. Required for DOCUMENTs (clients may use
    ///the source string as default) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Alias
    {
      get { return alias_ ?? AliasDefaultValue; }
      set
      {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "alias" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlias
    {
      get { return alias_ != null; }
    }
    /// <summary>Clears the value of the "alias" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlias()
    {
      alias_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Projection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Projection other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (Alias != other.Alias) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (HasAlias) hash ^= Alias.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (HasAlias) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (source_ != null)
      {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (HasAlias)
      {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (source_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (HasAlias)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Projection other)
    {
      if (other == null)
      {
        return;
      }
      if (other.source_ != null)
      {
        if (source_ == null)
        {
          Source = new global::Mysqlx.Expr.Expr();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.HasAlias)
      {
        Alias = other.Alias;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (source_ == null) {
              Source = new global::Mysqlx.Expr.Expr();
            }
            input.ReadMessage(Source);
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              if (source_ == null)
              {
                Source = new global::Mysqlx.Expr.Expr();
              }
              input.ReadMessage(Source);
              break;
            }
          case 18:
            {
              Alias = input.ReadString();
              break;
            }
        }
      }
    }
#endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Collection : pb::IMessage<Collection>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Collection> _parser = new pb::MessageParser<Collection>(() => new Collection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Collection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Collection()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Collection(Collection other) : this()
    {
      name_ = other.name_;
      schema_ = other.schema_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Collection Clone()
    {
      return new Collection(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name
    {
      get { return name_ ?? NameDefaultValue; }
      set
      {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName
    {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName()
    {
      name_ = null;
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private readonly static string SchemaDefaultValue = "";

    private string schema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Schema
    {
      get { return schema_ ?? SchemaDefaultValue; }
      set
      {
        schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "schema" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSchema
    {
      get { return schema_ != null; }
    }
    /// <summary>Clears the value of the "schema" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSchema()
    {
      schema_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Collection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Collection other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (Name != other.Name) return false;
      if (Schema != other.Schema) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasSchema) hash ^= Schema.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasSchema) {
        output.WriteRawTag(18);
        output.WriteString(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (HasName)
      {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasSchema)
      {
        output.WriteRawTag(18);
        output.WriteString(Schema);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (HasName)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasSchema)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Collection other)
    {
      if (other == null)
      {
        return;
      }
      if (other.HasName)
      {
        Name = other.Name;
      }
      if (other.HasSchema)
      {
        Schema = other.Schema;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Schema = input.ReadString();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              Name = input.ReadString();
              break;
            }
          case 18:
            {
              Schema = input.ReadString();
              break;
            }
        }
      }
    }
#endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Limit : pb::IMessage<Limit>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Limit> _parser = new pb::MessageParser<Limit>(() => new Limit());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Limit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Limit()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Limit(Limit other) : this()
    {
      _hasBits0 = other._hasBits0;
      rowCount_ = other.rowCount_;
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Limit Clone()
    {
      return new Limit(this);
    }

    /// <summary>Field number for the "row_count" field.</summary>
    public const int RowCountFieldNumber = 1;
    private readonly static ulong RowCountDefaultValue = 0UL;

    private ulong rowCount_;
    /// <summary>
    ///* maximum rows to filter 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong RowCount
    {
      get { if ((_hasBits0 & 1) != 0) { return rowCount_; } else { return RowCountDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        rowCount_ = value;
      }
    }
    /// <summary>Gets whether the "row_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRowCount
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "row_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRowCount()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private readonly static ulong OffsetDefaultValue = 0UL;

    private ulong offset_;
    /// <summary>
    ///* maximum rows to skip before applying the row_count 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Offset
    {
      get { if ((_hasBits0 & 2) != 0) { return offset_; } else { return OffsetDefaultValue; } }
      set
      {
        _hasBits0 |= 2;
        offset_ = value;
      }
    }
    /// <summary>Gets whether the "offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOffset
    {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOffset()
    {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Limit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Limit other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (RowCount != other.RowCount) return false;
      if (Offset != other.Offset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (HasRowCount) hash ^= RowCount.GetHashCode();
      if (HasOffset) hash ^= Offset.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (HasRowCount) {
        output.WriteRawTag(8);
        output.WriteUInt64(RowCount);
      }
      if (HasOffset) {
        output.WriteRawTag(16);
        output.WriteUInt64(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (HasRowCount)
      {
        output.WriteRawTag(8);
        output.WriteUInt64(RowCount);
      }
      if (HasOffset)
      {
        output.WriteRawTag(16);
        output.WriteUInt64(Offset);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (HasRowCount)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowCount);
      }
      if (HasOffset)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Limit other)
    {
      if (other == null)
      {
        return;
      }
      if (other.HasRowCount)
      {
        RowCount = other.RowCount;
      }
      if (other.HasOffset)
      {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RowCount = input.ReadUInt64();
            break;
          }
          case 16: {
            Offset = input.ReadUInt64();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8:
            {
              RowCount = input.ReadUInt64();
              break;
            }
          case 16:
            {
              Offset = input.ReadUInt64();
              break;
            }
        }
      }
    }
#endif

  }

  /// <summary>
  ///*
  ///LimitExpr, in comparison to Limit, is able to specify that row_count and
  ///offset are placeholders.
  ///This message support expressions of following types Expr/literal/UINT,
  ///Expr/PLACEHOLDER.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LimitExpr : pb::IMessage<LimitExpr>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<LimitExpr> _parser = new pb::MessageParser<LimitExpr>(() => new LimitExpr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LimitExpr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LimitExpr()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LimitExpr(LimitExpr other) : this()
    {
      rowCount_ = other.rowCount_ != null ? other.rowCount_.Clone() : null;
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LimitExpr Clone()
    {
      return new LimitExpr(this);
    }

    /// <summary>Field number for the "row_count" field.</summary>
    public const int RowCountFieldNumber = 1;
    private global::Mysqlx.Expr.Expr rowCount_;
    /// <summary>
    ///* maximum rows to filter 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.Expr RowCount
    {
      get { return rowCount_; }
      set
      {
        rowCount_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private global::Mysqlx.Expr.Expr offset_;
    /// <summary>
    ///* maximum rows to skip before applying the row_count 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.Expr Offset
    {
      get { return offset_; }
      set
      {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as LimitExpr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LimitExpr other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(RowCount, other.RowCount)) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (rowCount_ != null) hash ^= RowCount.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (rowCount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RowCount);
      }
      if (offset_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (rowCount_ != null)
      {
        output.WriteRawTag(10);
        output.WriteMessage(RowCount);
      }
      if (offset_ != null)
      {
        output.WriteRawTag(18);
        output.WriteMessage(Offset);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (rowCount_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RowCount);
      }
      if (offset_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LimitExpr other)
    {
      if (other == null)
      {
        return;
      }
      if (other.rowCount_ != null)
      {
        if (rowCount_ == null)
        {
          RowCount = new global::Mysqlx.Expr.Expr();
        }
        RowCount.MergeFrom(other.RowCount);
      }
      if (other.offset_ != null)
      {
        if (offset_ == null)
        {
          Offset = new global::Mysqlx.Expr.Expr();
        }
        Offset.MergeFrom(other.Offset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rowCount_ == null) {
              RowCount = new global::Mysqlx.Expr.Expr();
            }
            input.ReadMessage(RowCount);
            break;
          }
          case 18: {
            if (offset_ == null) {
              Offset = new global::Mysqlx.Expr.Expr();
            }
            input.ReadMessage(Offset);
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              if (rowCount_ == null)
              {
                RowCount = new global::Mysqlx.Expr.Expr();
              }
              input.ReadMessage(RowCount);
              break;
            }
          case 18:
            {
              if (offset_ == null)
              {
                Offset = new global::Mysqlx.Expr.Expr();
              }
              input.ReadMessage(Offset);
              break;
            }
        }
      }
    }
#endif

  }

  /// <summary>
  ///*
  ///Sort order
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Order : pb::IMessage<Order>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Order> _parser = new pb::MessageParser<Order>(() => new Order());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Order> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order(Order other) : this()
    {
      _hasBits0 = other._hasBits0;
      expr_ = other.expr_ != null ? other.expr_.Clone() : null;
      direction_ = other.direction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Order Clone()
    {
      return new Order(this);
    }

    /// <summary>Field number for the "expr" field.</summary>
    public const int ExprFieldNumber = 1;
    private global::Mysqlx.Expr.Expr expr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.Expr Expr
    {
      get { return expr_; }
      set
      {
        expr_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 2;
    private readonly static global::Mysqlx.Crud.Order.Types.Direction DirectionDefaultValue = global::Mysqlx.Crud.Order.Types.Direction.Asc;

    private global::Mysqlx.Crud.Order.Types.Direction direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Order.Types.Direction Direction
    {
      get { if ((_hasBits0 & 1) != 0) { return direction_; } else { return DirectionDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        direction_ = value;
      }
    }
    /// <summary>Gets whether the "direction" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDirection
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "direction" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDirection()
    {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Order);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Order other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Expr, other.Expr)) return false;
      if (Direction != other.Direction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (expr_ != null) hash ^= Expr.GetHashCode();
      if (HasDirection) hash ^= Direction.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (expr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Expr);
      }
      if (HasDirection) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (expr_ != null)
      {
        output.WriteRawTag(10);
        output.WriteMessage(Expr);
      }
      if (HasDirection)
      {
        output.WriteRawTag(16);
        output.WriteEnum((int)Direction);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (expr_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
      }
      if (HasDirection)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Direction);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Order other)
    {
      if (other == null)
      {
        return;
      }
      if (other.expr_ != null)
      {
        if (expr_ == null)
        {
          Expr = new global::Mysqlx.Expr.Expr();
        }
        Expr.MergeFrom(other.Expr);
      }
      if (other.HasDirection)
      {
        Direction = other.Direction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (expr_ == null) {
              Expr = new global::Mysqlx.Expr.Expr();
            }
            input.ReadMessage(Expr);
            break;
          }
          case 16: {
            Direction = (global::Mysqlx.Crud.Order.Types.Direction) input.ReadEnum();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              if (expr_ == null)
              {
                Expr = new global::Mysqlx.Expr.Expr();
              }
              input.ReadMessage(Expr);
              break;
            }
          case 16:
            {
              Direction = (global::Mysqlx.Crud.Order.Types.Direction)input.ReadEnum();
              break;
            }
        }
      }
    }
#endif

    #region Nested types
    /// <summary>Container for nested types declared in the Order message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types
    {
      public enum Direction
      {
        [pbr::OriginalName("ASC")] Asc = 1,
        [pbr::OriginalName("DESC")] Desc = 2,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UpdateOperation : pb::IMessage<UpdateOperation>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<UpdateOperation> _parser = new pb::MessageParser<UpdateOperation>(() => new UpdateOperation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UpdateOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateOperation()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateOperation(UpdateOperation other) : this()
    {
      _hasBits0 = other._hasBits0;
      source_ = other.source_ != null ? other.source_.Clone() : null;
      operation_ = other.operation_;
      value_ = other.value_ != null ? other.value_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UpdateOperation Clone()
    {
      return new UpdateOperation(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private global::Mysqlx.Expr.ColumnIdentifier source_;
    /// <summary>
    ///* specification of the value to be updated
    ///- if data_model is TABLE, a column name may be specified and also
    ///a document path, if the column has type JSON
    ///- if data_model is DOCUMENT, only document paths are allowed
    ///
    ///@note in both cases, schema and table must be not set 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.ColumnIdentifier Source
    {
      get { return source_; }
      set
      {
        source_ = value;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private readonly static global::Mysqlx.Crud.UpdateOperation.Types.UpdateType OperationDefaultValue = global::Mysqlx.Crud.UpdateOperation.Types.UpdateType.Set;

    private global::Mysqlx.Crud.UpdateOperation.Types.UpdateType operation_;
    /// <summary>
    ///* the type of operation to be performed 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.UpdateOperation.Types.UpdateType Operation
    {
      get { if ((_hasBits0 & 1) != 0) { return operation_; } else { return OperationDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        operation_ = value;
      }
    }
    /// <summary>Gets whether the "operation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOperation
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "operation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOperation()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private global::Mysqlx.Expr.Expr value_;
    /// <summary>
    ///* an expression to be computed as the new value for the operation 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.Expr Value
    {
      get { return value_; }
      set
      {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as UpdateOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UpdateOperation other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Source, other.Source)) return false;
      if (Operation != other.Operation) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (source_ != null) hash ^= Source.GetHashCode();
      if (HasOperation) hash ^= Operation.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (source_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (HasOperation) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Operation);
      }
      if (value_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (source_ != null)
      {
        output.WriteRawTag(10);
        output.WriteMessage(Source);
      }
      if (HasOperation)
      {
        output.WriteRawTag(16);
        output.WriteEnum((int)Operation);
      }
      if (value_ != null)
      {
        output.WriteRawTag(26);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (source_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (HasOperation)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Operation);
      }
      if (value_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UpdateOperation other)
    {
      if (other == null)
      {
        return;
      }
      if (other.source_ != null)
      {
        if (source_ == null)
        {
          Source = new global::Mysqlx.Expr.ColumnIdentifier();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.HasOperation)
      {
        Operation = other.Operation;
      }
      if (other.value_ != null)
      {
        if (value_ == null)
        {
          Value = new global::Mysqlx.Expr.Expr();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (source_ == null) {
              Source = new global::Mysqlx.Expr.ColumnIdentifier();
            }
            input.ReadMessage(Source);
            break;
          }
          case 16: {
            Operation = (global::Mysqlx.Crud.UpdateOperation.Types.UpdateType) input.ReadEnum();
            break;
          }
          case 26: {
            if (value_ == null) {
              Value = new global::Mysqlx.Expr.Expr();
            }
            input.ReadMessage(Value);
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              if (source_ == null)
              {
                Source = new global::Mysqlx.Expr.ColumnIdentifier();
              }
              input.ReadMessage(Source);
              break;
            }
          case 16:
            {
              Operation = (global::Mysqlx.Crud.UpdateOperation.Types.UpdateType)input.ReadEnum();
              break;
            }
          case 26:
            {
              if (value_ == null)
              {
                Value = new global::Mysqlx.Expr.Expr();
              }
              input.ReadMessage(Value);
              break;
            }
        }
      }
    }
#endif

    #region Nested types
    /// <summary>Container for nested types declared in the UpdateOperation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types
    {
      public enum UpdateType
      {
        /// <summary>
        ///* only allowed for TABLE 
        /// </summary>
        [pbr::OriginalName("SET")] Set = 1,
        /// <summary>
        ///* no value (removes the identified path from a object or array) 
        /// </summary>
        [pbr::OriginalName("ITEM_REMOVE")] ItemRemove = 2,
        /// <summary>
        ///* sets the new value on the identified path 
        /// </summary>
        [pbr::OriginalName("ITEM_SET")] ItemSet = 3,
        /// <summary>
        ///* replaces a value if the path exists 
        /// </summary>
        [pbr::OriginalName("ITEM_REPLACE")] ItemReplace = 4,
        /// <summary>
        ///* source and value must be documents 
        /// </summary>
        [pbr::OriginalName("ITEM_MERGE")] ItemMerge = 5,
        /// <summary>
        ///* insert the value in the array at the index identified in the source path 
        /// </summary>
        [pbr::OriginalName("ARRAY_INSERT")] ArrayInsert = 6,
        /// <summary>
        ///* append the value on the array at the identified path 
        /// </summary>
        [pbr::OriginalName("ARRAY_APPEND")] ArrayAppend = 7,
        /// <summary>
        ///* merge JSON object value with the provided patch expression 
        /// </summary>
        [pbr::OriginalName("MERGE_PATCH")] MergePatch = 8,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  ///Find Documents/Rows in a Collection/Table
  ///
  ///@startuml
  ///client -> server: Find
  ///... one or more Resultset ...
  ///@enduml
  ///
  ///@returns @ref Mysqlx::Resultset
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Find : pb::IMessage<Find>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Find> _parser = new pb::MessageParser<Find>(() => new Find());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Find> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Find()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Find(Find other) : this()
    {
      _hasBits0 = other._hasBits0;
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      dataModel_ = other.dataModel_;
      projection_ = other.projection_.Clone();
      args_ = other.args_.Clone();
      criteria_ = other.criteria_ != null ? other.criteria_.Clone() : null;
      limit_ = other.limit_ != null ? other.limit_.Clone() : null;
      order_ = other.order_.Clone();
      grouping_ = other.grouping_.Clone();
      groupingCriteria_ = other.groupingCriteria_ != null ? other.groupingCriteria_.Clone() : null;
      locking_ = other.locking_;
      lockingOptions_ = other.lockingOptions_;
      limitExpr_ = other.limitExpr_ != null ? other.limitExpr_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Find Clone()
    {
      return new Find(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 2;
    private global::Mysqlx.Crud.Collection collection_;
    /// <summary>
    ///* collection in which to find 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Collection Collection
    {
      get { return collection_; }
      set
      {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "data_model" field.</summary>
    public const int DataModelFieldNumber = 3;
    private readonly static global::Mysqlx.Crud.DataModel DataModelDefaultValue = global::Mysqlx.Crud.DataModel.Document;

    private global::Mysqlx.Crud.DataModel dataModel_;
    /// <summary>
    ///* data model that the operations refer to 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.DataModel DataModel
    {
      get { if ((_hasBits0 & 1) != 0) { return dataModel_; } else { return DataModelDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        dataModel_ = value;
      }
    }
    /// <summary>Gets whether the "data_model" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataModel
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "data_model" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataModel()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "projection" field.</summary>
    public const int ProjectionFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Mysqlx.Crud.Projection> _repeated_projection_codec
        = pb::FieldCodec.ForMessage(34, global::Mysqlx.Crud.Projection.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Crud.Projection> projection_ = new pbc::RepeatedField<global::Mysqlx.Crud.Projection>();
    /// <summary>
    ///* list of column projections that shall be returned 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Crud.Projection> Projection
    {
      get { return projection_; }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Mysqlx.Datatypes.Scalar> _repeated_args_codec
        = pb::FieldCodec.ForMessage(90, global::Mysqlx.Datatypes.Scalar.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar> args_ = new pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar>();
    /// <summary>
    ///* values for parameters used in filter expression 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar> Args
    {
      get { return args_; }
    }

    /// <summary>Field number for the "criteria" field.</summary>
    public const int CriteriaFieldNumber = 5;
    private global::Mysqlx.Expr.Expr criteria_;
    /// <summary>
    ///* filter criteria 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.Expr Criteria
    {
      get { return criteria_; }
      set
      {
        criteria_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private global::Mysqlx.Crud.Limit limit_;
    /// <summary>
    ///* numbers of rows that shall be skipped and returned
    ///(user can set one of: limit, limit_expr) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Limit Limit
    {
      get { return limit_; }
      set
      {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Mysqlx.Crud.Order> _repeated_order_codec
        = pb::FieldCodec.ForMessage(58, global::Mysqlx.Crud.Order.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Crud.Order> order_ = new pbc::RepeatedField<global::Mysqlx.Crud.Order>();
    /// <summary>
    ///* sort-order in which the rows/document shall be returned in 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Crud.Order> Order
    {
      get { return order_; }
    }

    /// <summary>Field number for the "grouping" field.</summary>
    public const int GroupingFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Mysqlx.Expr.Expr> _repeated_grouping_codec
        = pb::FieldCodec.ForMessage(66, global::Mysqlx.Expr.Expr.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Expr.Expr> grouping_ = new pbc::RepeatedField<global::Mysqlx.Expr.Expr>();
    /// <summary>
    ///* column expression list for aggregation (GROUP BY) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Expr.Expr> Grouping
    {
      get { return grouping_; }
    }

    /// <summary>Field number for the "grouping_criteria" field.</summary>
    public const int GroupingCriteriaFieldNumber = 9;
    private global::Mysqlx.Expr.Expr groupingCriteria_;
    /// <summary>
    ///* filter criteria for aggregated groups 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.Expr GroupingCriteria
    {
      get { return groupingCriteria_; }
      set
      {
        groupingCriteria_ = value;
      }
    }

    /// <summary>Field number for the "locking" field.</summary>
    public const int LockingFieldNumber = 12;
    private readonly static global::Mysqlx.Crud.Find.Types.RowLock LockingDefaultValue = global::Mysqlx.Crud.Find.Types.RowLock.SharedLock;

    private global::Mysqlx.Crud.Find.Types.RowLock locking_;
    /// <summary>
    ///* perform row locking on matches 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Find.Types.RowLock Locking
    {
      get { if ((_hasBits0 & 2) != 0) { return locking_; } else { return LockingDefaultValue; } }
      set
      {
        _hasBits0 |= 2;
        locking_ = value;
      }
    }
    /// <summary>Gets whether the "locking" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLocking
    {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "locking" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLocking()
    {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "locking_options" field.</summary>
    public const int LockingOptionsFieldNumber = 13;
    private readonly static global::Mysqlx.Crud.Find.Types.RowLockOptions LockingOptionsDefaultValue = global::Mysqlx.Crud.Find.Types.RowLockOptions.Nowait;

    private global::Mysqlx.Crud.Find.Types.RowLockOptions lockingOptions_;
    /// <summary>
    ///* additional options how to handle locked rows 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Find.Types.RowLockOptions LockingOptions
    {
      get { if ((_hasBits0 & 4) != 0) { return lockingOptions_; } else { return LockingOptionsDefaultValue; } }
      set
      {
        _hasBits0 |= 4;
        lockingOptions_ = value;
      }
    }
    /// <summary>Gets whether the "locking_options" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLockingOptions
    {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "locking_options" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLockingOptions()
    {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "limit_expr" field.</summary>
    public const int LimitExprFieldNumber = 14;
    private global::Mysqlx.Crud.LimitExpr limitExpr_;
    /// <summary>
    ///* numbers of rows that shall be skipped and returned
    ///(user can set one of: limit, limit_expr) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.LimitExpr LimitExpr
    {
      get { return limitExpr_; }
      set
      {
        limitExpr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Find);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Find other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Collection, other.Collection)) return false;
      if (DataModel != other.DataModel) return false;
      if (!projection_.Equals(other.projection_)) return false;
      if (!args_.Equals(other.args_)) return false;
      if (!object.Equals(Criteria, other.Criteria)) return false;
      if (!object.Equals(Limit, other.Limit)) return false;
      if (!order_.Equals(other.order_)) return false;
      if (!grouping_.Equals(other.grouping_)) return false;
      if (!object.Equals(GroupingCriteria, other.GroupingCriteria)) return false;
      if (Locking != other.Locking) return false;
      if (LockingOptions != other.LockingOptions) return false;
      if (!object.Equals(LimitExpr, other.LimitExpr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (collection_ != null) hash ^= Collection.GetHashCode();
      if (HasDataModel) hash ^= DataModel.GetHashCode();
      hash ^= projection_.GetHashCode();
      hash ^= args_.GetHashCode();
      if (criteria_ != null) hash ^= Criteria.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      hash ^= order_.GetHashCode();
      hash ^= grouping_.GetHashCode();
      if (groupingCriteria_ != null) hash ^= GroupingCriteria.GetHashCode();
      if (HasLocking) hash ^= Locking.GetHashCode();
      if (HasLockingOptions) hash ^= LockingOptions.GetHashCode();
      if (limitExpr_ != null) hash ^= LimitExpr.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (collection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Collection);
      }
      if (HasDataModel) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DataModel);
      }
      projection_.WriteTo(output, _repeated_projection_codec);
      if (criteria_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Criteria);
      }
      if (limit_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Limit);
      }
      order_.WriteTo(output, _repeated_order_codec);
      grouping_.WriteTo(output, _repeated_grouping_codec);
      if (groupingCriteria_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(GroupingCriteria);
      }
      args_.WriteTo(output, _repeated_args_codec);
      if (HasLocking) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Locking);
      }
      if (HasLockingOptions) {
        output.WriteRawTag(104);
        output.WriteEnum((int) LockingOptions);
      }
      if (limitExpr_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(LimitExpr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (collection_ != null)
      {
        output.WriteRawTag(18);
        output.WriteMessage(Collection);
      }
      if (HasDataModel)
      {
        output.WriteRawTag(24);
        output.WriteEnum((int)DataModel);
      }
      projection_.WriteTo(ref output, _repeated_projection_codec);
      if (criteria_ != null)
      {
        output.WriteRawTag(42);
        output.WriteMessage(Criteria);
      }
      if (limit_ != null)
      {
        output.WriteRawTag(50);
        output.WriteMessage(Limit);
      }
      order_.WriteTo(ref output, _repeated_order_codec);
      grouping_.WriteTo(ref output, _repeated_grouping_codec);
      if (groupingCriteria_ != null)
      {
        output.WriteRawTag(74);
        output.WriteMessage(GroupingCriteria);
      }
      args_.WriteTo(ref output, _repeated_args_codec);
      if (HasLocking)
      {
        output.WriteRawTag(96);
        output.WriteEnum((int)Locking);
      }
      if (HasLockingOptions)
      {
        output.WriteRawTag(104);
        output.WriteEnum((int)LockingOptions);
      }
      if (limitExpr_ != null)
      {
        output.WriteRawTag(114);
        output.WriteMessage(LimitExpr);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (collection_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (HasDataModel)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DataModel);
      }
      size += projection_.CalculateSize(_repeated_projection_codec);
      size += args_.CalculateSize(_repeated_args_codec);
      if (criteria_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Criteria);
      }
      if (limit_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Limit);
      }
      size += order_.CalculateSize(_repeated_order_codec);
      size += grouping_.CalculateSize(_repeated_grouping_codec);
      if (groupingCriteria_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupingCriteria);
      }
      if (HasLocking)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Locking);
      }
      if (HasLockingOptions)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)LockingOptions);
      }
      if (limitExpr_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LimitExpr);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Find other)
    {
      if (other == null)
      {
        return;
      }
      if (other.collection_ != null)
      {
        if (collection_ == null)
        {
          Collection = new global::Mysqlx.Crud.Collection();
        }
        Collection.MergeFrom(other.Collection);
      }
      if (other.HasDataModel)
      {
        DataModel = other.DataModel;
      }
      projection_.Add(other.projection_);
      args_.Add(other.args_);
      if (other.criteria_ != null)
      {
        if (criteria_ == null)
        {
          Criteria = new global::Mysqlx.Expr.Expr();
        }
        Criteria.MergeFrom(other.Criteria);
      }
      if (other.limit_ != null)
      {
        if (limit_ == null)
        {
          Limit = new global::Mysqlx.Crud.Limit();
        }
        Limit.MergeFrom(other.Limit);
      }
      order_.Add(other.order_);
      grouping_.Add(other.grouping_);
      if (other.groupingCriteria_ != null)
      {
        if (groupingCriteria_ == null)
        {
          GroupingCriteria = new global::Mysqlx.Expr.Expr();
        }
        GroupingCriteria.MergeFrom(other.GroupingCriteria);
      }
      if (other.HasLocking)
      {
        Locking = other.Locking;
      }
      if (other.HasLockingOptions)
      {
        LockingOptions = other.LockingOptions;
      }
      if (other.limitExpr_ != null)
      {
        if (limitExpr_ == null)
        {
          LimitExpr = new global::Mysqlx.Crud.LimitExpr();
        }
        LimitExpr.MergeFrom(other.LimitExpr);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (collection_ == null) {
              Collection = new global::Mysqlx.Crud.Collection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 24: {
            DataModel = (global::Mysqlx.Crud.DataModel) input.ReadEnum();
            break;
          }
          case 34: {
            projection_.AddEntriesFrom(input, _repeated_projection_codec);
            break;
          }
          case 42: {
            if (criteria_ == null) {
              Criteria = new global::Mysqlx.Expr.Expr();
            }
            input.ReadMessage(Criteria);
            break;
          }
          case 50: {
            if (limit_ == null) {
              Limit = new global::Mysqlx.Crud.Limit();
            }
            input.ReadMessage(Limit);
            break;
          }
          case 58: {
            order_.AddEntriesFrom(input, _repeated_order_codec);
            break;
          }
          case 66: {
            grouping_.AddEntriesFrom(input, _repeated_grouping_codec);
            break;
          }
          case 74: {
            if (groupingCriteria_ == null) {
              GroupingCriteria = new global::Mysqlx.Expr.Expr();
            }
            input.ReadMessage(GroupingCriteria);
            break;
          }
          case 90: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 96: {
            Locking = (global::Mysqlx.Crud.Find.Types.RowLock) input.ReadEnum();
            break;
          }
          case 104: {
            LockingOptions = (global::Mysqlx.Crud.Find.Types.RowLockOptions) input.ReadEnum();
            break;
          }
          case 114: {
            if (limitExpr_ == null) {
              LimitExpr = new global::Mysqlx.Crud.LimitExpr();
            }
            input.ReadMessage(LimitExpr);
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18:
            {
              if (collection_ == null)
              {
                Collection = new global::Mysqlx.Crud.Collection();
              }
              input.ReadMessage(Collection);
              break;
            }
          case 24:
            {
              DataModel = (global::Mysqlx.Crud.DataModel)input.ReadEnum();
              break;
            }
          case 34:
            {
              projection_.AddEntriesFrom(ref input, _repeated_projection_codec);
              break;
            }
          case 42:
            {
              if (criteria_ == null)
              {
                Criteria = new global::Mysqlx.Expr.Expr();
              }
              input.ReadMessage(Criteria);
              break;
            }
          case 50:
            {
              if (limit_ == null)
              {
                Limit = new global::Mysqlx.Crud.Limit();
              }
              input.ReadMessage(Limit);
              break;
            }
          case 58:
            {
              order_.AddEntriesFrom(ref input, _repeated_order_codec);
              break;
            }
          case 66:
            {
              grouping_.AddEntriesFrom(ref input, _repeated_grouping_codec);
              break;
            }
          case 74:
            {
              if (groupingCriteria_ == null)
              {
                GroupingCriteria = new global::Mysqlx.Expr.Expr();
              }
              input.ReadMessage(GroupingCriteria);
              break;
            }
          case 90:
            {
              args_.AddEntriesFrom(ref input, _repeated_args_codec);
              break;
            }
          case 96:
            {
              Locking = (global::Mysqlx.Crud.Find.Types.RowLock)input.ReadEnum();
              break;
            }
          case 104:
            {
              LockingOptions = (global::Mysqlx.Crud.Find.Types.RowLockOptions)input.ReadEnum();
              break;
            }
          case 114:
            {
              if (limitExpr_ == null)
              {
                LimitExpr = new global::Mysqlx.Crud.LimitExpr();
              }
              input.ReadMessage(LimitExpr);
              break;
            }
        }
      }
    }
#endif

    #region Nested types
    /// <summary>Container for nested types declared in the Find message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types
    {
      public enum RowLock
      {
        /// <summary>
        ///* Lock matching rows against updates 
        /// </summary>
        [pbr::OriginalName("SHARED_LOCK")] SharedLock = 1,
        /// <summary>
        ///* Lock matching rows so no other transaction can read or write to it 
        /// </summary>
        [pbr::OriginalName("EXCLUSIVE_LOCK")] ExclusiveLock = 2,
      }

      public enum RowLockOptions
      {
        /// <summary>
        ///* Do not wait to acquire row lock, fail with an error
        ///if a requested row is locked 
        /// </summary>
        [pbr::OriginalName("NOWAIT")] Nowait = 1,
        /// <summary>
        ///* Do not wait to acquire a row lock,
        ///remove locked rows from the result set 
        /// </summary>
        [pbr::OriginalName("SKIP_LOCKED")] SkipLocked = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///*
  ///Insert documents/rows into a collection/table
  ///
  ///@returns @ref Mysqlx::Resultset
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Insert : pb::IMessage<Insert>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Insert> _parser = new pb::MessageParser<Insert>(() => new Insert());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Insert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Insert()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Insert(Insert other) : this()
    {
      _hasBits0 = other._hasBits0;
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      dataModel_ = other.dataModel_;
      projection_ = other.projection_.Clone();
      row_ = other.row_.Clone();
      args_ = other.args_.Clone();
      upsert_ = other.upsert_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Insert Clone()
    {
      return new Insert(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private global::Mysqlx.Crud.Collection collection_;
    /// <summary>
    ///* collection to insert into 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Collection Collection
    {
      get { return collection_; }
      set
      {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "data_model" field.</summary>
    public const int DataModelFieldNumber = 2;
    private readonly static global::Mysqlx.Crud.DataModel DataModelDefaultValue = global::Mysqlx.Crud.DataModel.Document;

    private global::Mysqlx.Crud.DataModel dataModel_;
    /// <summary>
    ///* data model that the operations refer to 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.DataModel DataModel
    {
      get { if ((_hasBits0 & 1) != 0) { return dataModel_; } else { return DataModelDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        dataModel_ = value;
      }
    }
    /// <summary>Gets whether the "data_model" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataModel
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "data_model" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataModel()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "projection" field.</summary>
    public const int ProjectionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Mysqlx.Crud.Column> _repeated_projection_codec
        = pb::FieldCodec.ForMessage(26, global::Mysqlx.Crud.Column.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Crud.Column> projection_ = new pbc::RepeatedField<global::Mysqlx.Crud.Column>();
    /// <summary>
    ///* name of the columns to insert data into
    ///(empty if data_model is DOCUMENT) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Crud.Column> Projection
    {
      get { return projection_; }
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Mysqlx.Crud.Insert.Types.TypedRow> _repeated_row_codec
        = pb::FieldCodec.ForMessage(34, global::Mysqlx.Crud.Insert.Types.TypedRow.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Crud.Insert.Types.TypedRow> row_ = new pbc::RepeatedField<global::Mysqlx.Crud.Insert.Types.TypedRow>();
    /// <summary>
    ///* set of rows to insert into the collection/table (a single expression
    ///with a JSON document literal or an OBJECT expression) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Crud.Insert.Types.TypedRow> Row
    {
      get { return row_; }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Mysqlx.Datatypes.Scalar> _repeated_args_codec
        = pb::FieldCodec.ForMessage(42, global::Mysqlx.Datatypes.Scalar.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar> args_ = new pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar>();
    /// <summary>
    ///* values for parameters used in row expressions 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar> Args
    {
      get { return args_; }
    }

    /// <summary>Field number for the "upsert" field.</summary>
    public const int UpsertFieldNumber = 6;
    private readonly static bool UpsertDefaultValue = false;

    private bool upsert_;
    /// <summary>
    ///* true if this should be treated as an Upsert
    ///(that is, update on duplicate key) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Upsert
    {
      get { if ((_hasBits0 & 2) != 0) { return upsert_; } else { return UpsertDefaultValue; } }
      set
      {
        _hasBits0 |= 2;
        upsert_ = value;
      }
    }
    /// <summary>Gets whether the "upsert" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpsert
    {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "upsert" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpsert()
    {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Insert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Insert other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Collection, other.Collection)) return false;
      if (DataModel != other.DataModel) return false;
      if (!projection_.Equals(other.projection_)) return false;
      if (!row_.Equals(other.row_)) return false;
      if (!args_.Equals(other.args_)) return false;
      if (Upsert != other.Upsert) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (collection_ != null) hash ^= Collection.GetHashCode();
      if (HasDataModel) hash ^= DataModel.GetHashCode();
      hash ^= projection_.GetHashCode();
      hash ^= row_.GetHashCode();
      hash ^= args_.GetHashCode();
      if (HasUpsert) hash ^= Upsert.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (collection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasDataModel) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataModel);
      }
      projection_.WriteTo(output, _repeated_projection_codec);
      row_.WriteTo(output, _repeated_row_codec);
      args_.WriteTo(output, _repeated_args_codec);
      if (HasUpsert) {
        output.WriteRawTag(48);
        output.WriteBool(Upsert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (collection_ != null)
      {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasDataModel)
      {
        output.WriteRawTag(16);
        output.WriteEnum((int)DataModel);
      }
      projection_.WriteTo(ref output, _repeated_projection_codec);
      row_.WriteTo(ref output, _repeated_row_codec);
      args_.WriteTo(ref output, _repeated_args_codec);
      if (HasUpsert)
      {
        output.WriteRawTag(48);
        output.WriteBool(Upsert);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (collection_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (HasDataModel)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DataModel);
      }
      size += projection_.CalculateSize(_repeated_projection_codec);
      size += row_.CalculateSize(_repeated_row_codec);
      size += args_.CalculateSize(_repeated_args_codec);
      if (HasUpsert)
      {
        size += 1 + 1;
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Insert other)
    {
      if (other == null)
      {
        return;
      }
      if (other.collection_ != null)
      {
        if (collection_ == null)
        {
          Collection = new global::Mysqlx.Crud.Collection();
        }
        Collection.MergeFrom(other.Collection);
      }
      if (other.HasDataModel)
      {
        DataModel = other.DataModel;
      }
      projection_.Add(other.projection_);
      row_.Add(other.row_);
      args_.Add(other.args_);
      if (other.HasUpsert)
      {
        Upsert = other.Upsert;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (collection_ == null) {
              Collection = new global::Mysqlx.Crud.Collection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 16: {
            DataModel = (global::Mysqlx.Crud.DataModel) input.ReadEnum();
            break;
          }
          case 26: {
            projection_.AddEntriesFrom(input, _repeated_projection_codec);
            break;
          }
          case 34: {
            row_.AddEntriesFrom(input, _repeated_row_codec);
            break;
          }
          case 42: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 48: {
            Upsert = input.ReadBool();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              if (collection_ == null)
              {
                Collection = new global::Mysqlx.Crud.Collection();
              }
              input.ReadMessage(Collection);
              break;
            }
          case 16:
            {
              DataModel = (global::Mysqlx.Crud.DataModel)input.ReadEnum();
              break;
            }
          case 26:
            {
              projection_.AddEntriesFrom(ref input, _repeated_projection_codec);
              break;
            }
          case 34:
            {
              row_.AddEntriesFrom(ref input, _repeated_row_codec);
              break;
            }
          case 42:
            {
              args_.AddEntriesFrom(ref input, _repeated_args_codec);
              break;
            }
          case 48:
            {
              Upsert = input.ReadBool();
              break;
            }
        }
      }
    }
#endif

    #region Nested types
    /// <summary>Container for nested types declared in the Insert message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types
    {
      /// <summary>
      ///* set of fields to insert as a one row 
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class TypedRow : pb::IMessage<TypedRow>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
#endif
      {
        private static readonly pb::MessageParser<TypedRow> _parser = new pb::MessageParser<TypedRow>(() => new TypedRow());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<TypedRow> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor
        {
          get { return global::Mysqlx.Crud.Insert.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TypedRow()
        {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TypedRow(TypedRow other) : this()
        {
          field_ = other.field_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TypedRow Clone()
        {
          return new TypedRow(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Mysqlx.Expr.Expr> _repeated_field_codec
            = pb::FieldCodec.ForMessage(10, global::Mysqlx.Expr.Expr.Parser);
        private readonly pbc::RepeatedField<global::Mysqlx.Expr.Expr> field_ = new pbc::RepeatedField<global::Mysqlx.Expr.Expr>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Mysqlx.Expr.Expr> Field
        {
          get { return field_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other)
        {
          return Equals(other as TypedRow);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(TypedRow other)
        {
          if (ReferenceEquals(other, null))
          {
            return false;
          }
          if (ReferenceEquals(other, this))
          {
            return true;
          }
          if (!field_.Equals(other.field_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode()
        {
          int hash = 1;
          hash ^= field_.GetHashCode();
          if (_unknownFields != null)
          {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString()
        {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
#else
          field_.WriteTo(output, _repeated_field_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
          field_.WriteTo(ref output, _repeated_field_codec);
          if (_unknownFields != null)
          {
            _unknownFields.WriteTo(ref output);
          }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize()
        {
          int size = 0;
          size += field_.CalculateSize(_repeated_field_codec);
          if (_unknownFields != null)
          {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(TypedRow other)
        {
          if (other == null)
          {
            return;
          }
          field_.Add(other.field_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
#else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                field_.AddEntriesFrom(input, _repeated_field_codec);
                break;
              }
            }
          }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
          uint tag;
          while ((tag = input.ReadTag()) != 0)
          {
            switch (tag)
            {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
                {
                  field_.AddEntriesFrom(ref input, _repeated_field_codec);
                  break;
                }
            }
          }
        }
#endif

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  ///Update documents/rows in a collection/table
  ///
  ///@returns @ref Mysqlx::Resultset
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Update : pb::IMessage<Update>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Update> _parser = new pb::MessageParser<Update>(() => new Update());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Update> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Update()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Update(Update other) : this()
    {
      _hasBits0 = other._hasBits0;
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      dataModel_ = other.dataModel_;
      criteria_ = other.criteria_ != null ? other.criteria_.Clone() : null;
      limit_ = other.limit_ != null ? other.limit_.Clone() : null;
      order_ = other.order_.Clone();
      operation_ = other.operation_.Clone();
      args_ = other.args_.Clone();
      limitExpr_ = other.limitExpr_ != null ? other.limitExpr_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Update Clone()
    {
      return new Update(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 2;
    private global::Mysqlx.Crud.Collection collection_;
    /// <summary>
    ///* collection to change 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Collection Collection
    {
      get { return collection_; }
      set
      {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "data_model" field.</summary>
    public const int DataModelFieldNumber = 3;
    private readonly static global::Mysqlx.Crud.DataModel DataModelDefaultValue = global::Mysqlx.Crud.DataModel.Document;

    private global::Mysqlx.Crud.DataModel dataModel_;
    /// <summary>
    ///* datamodel that the operations refer to  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.DataModel DataModel
    {
      get { if ((_hasBits0 & 1) != 0) { return dataModel_; } else { return DataModelDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        dataModel_ = value;
      }
    }
    /// <summary>Gets whether the "data_model" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataModel
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "data_model" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataModel()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "criteria" field.</summary>
    public const int CriteriaFieldNumber = 4;
    private global::Mysqlx.Expr.Expr criteria_;
    /// <summary>
    ///* filter expression to match rows that the operations will apply on 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.Expr Criteria
    {
      get { return criteria_; }
      set
      {
        criteria_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 5;
    private global::Mysqlx.Crud.Limit limit_;
    /// <summary>
    ///* limits the number of rows to match
    ///(user can set one of: limit, limit_expr) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Limit Limit
    {
      get { return limit_; }
      set
      {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Mysqlx.Crud.Order> _repeated_order_codec
        = pb::FieldCodec.ForMessage(50, global::Mysqlx.Crud.Order.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Crud.Order> order_ = new pbc::RepeatedField<global::Mysqlx.Crud.Order>();
    /// <summary>
    ///* specifies order of matched rows 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Crud.Order> Order
    {
      get { return order_; }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Mysqlx.Crud.UpdateOperation> _repeated_operation_codec
        = pb::FieldCodec.ForMessage(58, global::Mysqlx.Crud.UpdateOperation.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Crud.UpdateOperation> operation_ = new pbc::RepeatedField<global::Mysqlx.Crud.UpdateOperation>();
    /// <summary>
    ///* list of operations to be applied.
    ///Valid operations will depend on the data_model 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Crud.UpdateOperation> Operation
    {
      get { return operation_; }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Mysqlx.Datatypes.Scalar> _repeated_args_codec
        = pb::FieldCodec.ForMessage(66, global::Mysqlx.Datatypes.Scalar.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar> args_ = new pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar>();
    /// <summary>
    ///* values for parameters used in filter expression 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar> Args
    {
      get { return args_; }
    }

    /// <summary>Field number for the "limit_expr" field.</summary>
    public const int LimitExprFieldNumber = 9;
    private global::Mysqlx.Crud.LimitExpr limitExpr_;
    /// <summary>
    ///* limits the number of rows to match
    ///(user can set one of: limit, limit_expr) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.LimitExpr LimitExpr
    {
      get { return limitExpr_; }
      set
      {
        limitExpr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Update);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Update other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Collection, other.Collection)) return false;
      if (DataModel != other.DataModel) return false;
      if (!object.Equals(Criteria, other.Criteria)) return false;
      if (!object.Equals(Limit, other.Limit)) return false;
      if (!order_.Equals(other.order_)) return false;
      if (!operation_.Equals(other.operation_)) return false;
      if (!args_.Equals(other.args_)) return false;
      if (!object.Equals(LimitExpr, other.LimitExpr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (collection_ != null) hash ^= Collection.GetHashCode();
      if (HasDataModel) hash ^= DataModel.GetHashCode();
      if (criteria_ != null) hash ^= Criteria.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      hash ^= order_.GetHashCode();
      hash ^= operation_.GetHashCode();
      hash ^= args_.GetHashCode();
      if (limitExpr_ != null) hash ^= LimitExpr.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (collection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Collection);
      }
      if (HasDataModel) {
        output.WriteRawTag(24);
        output.WriteEnum((int) DataModel);
      }
      if (criteria_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Criteria);
      }
      if (limit_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Limit);
      }
      order_.WriteTo(output, _repeated_order_codec);
      operation_.WriteTo(output, _repeated_operation_codec);
      args_.WriteTo(output, _repeated_args_codec);
      if (limitExpr_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(LimitExpr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (collection_ != null)
      {
        output.WriteRawTag(18);
        output.WriteMessage(Collection);
      }
      if (HasDataModel)
      {
        output.WriteRawTag(24);
        output.WriteEnum((int)DataModel);
      }
      if (criteria_ != null)
      {
        output.WriteRawTag(34);
        output.WriteMessage(Criteria);
      }
      if (limit_ != null)
      {
        output.WriteRawTag(42);
        output.WriteMessage(Limit);
      }
      order_.WriteTo(ref output, _repeated_order_codec);
      operation_.WriteTo(ref output, _repeated_operation_codec);
      args_.WriteTo(ref output, _repeated_args_codec);
      if (limitExpr_ != null)
      {
        output.WriteRawTag(74);
        output.WriteMessage(LimitExpr);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (collection_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (HasDataModel)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DataModel);
      }
      if (criteria_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Criteria);
      }
      if (limit_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Limit);
      }
      size += order_.CalculateSize(_repeated_order_codec);
      size += operation_.CalculateSize(_repeated_operation_codec);
      size += args_.CalculateSize(_repeated_args_codec);
      if (limitExpr_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LimitExpr);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Update other)
    {
      if (other == null)
      {
        return;
      }
      if (other.collection_ != null)
      {
        if (collection_ == null)
        {
          Collection = new global::Mysqlx.Crud.Collection();
        }
        Collection.MergeFrom(other.Collection);
      }
      if (other.HasDataModel)
      {
        DataModel = other.DataModel;
      }
      if (other.criteria_ != null)
      {
        if (criteria_ == null)
        {
          Criteria = new global::Mysqlx.Expr.Expr();
        }
        Criteria.MergeFrom(other.Criteria);
      }
      if (other.limit_ != null)
      {
        if (limit_ == null)
        {
          Limit = new global::Mysqlx.Crud.Limit();
        }
        Limit.MergeFrom(other.Limit);
      }
      order_.Add(other.order_);
      operation_.Add(other.operation_);
      args_.Add(other.args_);
      if (other.limitExpr_ != null)
      {
        if (limitExpr_ == null)
        {
          LimitExpr = new global::Mysqlx.Crud.LimitExpr();
        }
        LimitExpr.MergeFrom(other.LimitExpr);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (collection_ == null) {
              Collection = new global::Mysqlx.Crud.Collection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 24: {
            DataModel = (global::Mysqlx.Crud.DataModel) input.ReadEnum();
            break;
          }
          case 34: {
            if (criteria_ == null) {
              Criteria = new global::Mysqlx.Expr.Expr();
            }
            input.ReadMessage(Criteria);
            break;
          }
          case 42: {
            if (limit_ == null) {
              Limit = new global::Mysqlx.Crud.Limit();
            }
            input.ReadMessage(Limit);
            break;
          }
          case 50: {
            order_.AddEntriesFrom(input, _repeated_order_codec);
            break;
          }
          case 58: {
            operation_.AddEntriesFrom(input, _repeated_operation_codec);
            break;
          }
          case 66: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 74: {
            if (limitExpr_ == null) {
              LimitExpr = new global::Mysqlx.Crud.LimitExpr();
            }
            input.ReadMessage(LimitExpr);
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18:
            {
              if (collection_ == null)
              {
                Collection = new global::Mysqlx.Crud.Collection();
              }
              input.ReadMessage(Collection);
              break;
            }
          case 24:
            {
              DataModel = (global::Mysqlx.Crud.DataModel)input.ReadEnum();
              break;
            }
          case 34:
            {
              if (criteria_ == null)
              {
                Criteria = new global::Mysqlx.Expr.Expr();
              }
              input.ReadMessage(Criteria);
              break;
            }
          case 42:
            {
              if (limit_ == null)
              {
                Limit = new global::Mysqlx.Crud.Limit();
              }
              input.ReadMessage(Limit);
              break;
            }
          case 50:
            {
              order_.AddEntriesFrom(ref input, _repeated_order_codec);
              break;
            }
          case 58:
            {
              operation_.AddEntriesFrom(ref input, _repeated_operation_codec);
              break;
            }
          case 66:
            {
              args_.AddEntriesFrom(ref input, _repeated_args_codec);
              break;
            }
          case 74:
            {
              if (limitExpr_ == null)
              {
                LimitExpr = new global::Mysqlx.Crud.LimitExpr();
              }
              input.ReadMessage(LimitExpr);
              break;
            }
        }
      }
    }
#endif

  }

  /// <summary>
  ///*
  ///Delete documents/rows from a Collection/Table
  ///
  ///@returns @ref Mysqlx::Resultset
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Delete : pb::IMessage<Delete>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Delete> _parser = new pb::MessageParser<Delete>(() => new Delete());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Delete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Delete()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Delete(Delete other) : this()
    {
      _hasBits0 = other._hasBits0;
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      dataModel_ = other.dataModel_;
      criteria_ = other.criteria_ != null ? other.criteria_.Clone() : null;
      limit_ = other.limit_ != null ? other.limit_.Clone() : null;
      order_ = other.order_.Clone();
      args_ = other.args_.Clone();
      limitExpr_ = other.limitExpr_ != null ? other.limitExpr_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Delete Clone()
    {
      return new Delete(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private global::Mysqlx.Crud.Collection collection_;
    /// <summary>
    ///* collection to change 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Collection Collection
    {
      get { return collection_; }
      set
      {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "data_model" field.</summary>
    public const int DataModelFieldNumber = 2;
    private readonly static global::Mysqlx.Crud.DataModel DataModelDefaultValue = global::Mysqlx.Crud.DataModel.Document;

    private global::Mysqlx.Crud.DataModel dataModel_;
    /// <summary>
    ///* data model that the operations refer to 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.DataModel DataModel
    {
      get { if ((_hasBits0 & 1) != 0) { return dataModel_; } else { return DataModelDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        dataModel_ = value;
      }
    }
    /// <summary>Gets whether the "data_model" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDataModel
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "data_model" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDataModel()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "criteria" field.</summary>
    public const int CriteriaFieldNumber = 3;
    private global::Mysqlx.Expr.Expr criteria_;
    /// <summary>
    ///* filter expression to match rows that the operations will apply on 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Expr.Expr Criteria
    {
      get { return criteria_; }
      set
      {
        criteria_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 4;
    private global::Mysqlx.Crud.Limit limit_;
    /// <summary>
    ///* limits the number of rows to match
    ///(user can set one of: limit, limit_expr) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Limit Limit
    {
      get { return limit_; }
      set
      {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Mysqlx.Crud.Order> _repeated_order_codec
        = pb::FieldCodec.ForMessage(42, global::Mysqlx.Crud.Order.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Crud.Order> order_ = new pbc::RepeatedField<global::Mysqlx.Crud.Order>();
    /// <summary>
    ///* specifies order of matched rows 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Crud.Order> Order
    {
      get { return order_; }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Mysqlx.Datatypes.Scalar> _repeated_args_codec
        = pb::FieldCodec.ForMessage(50, global::Mysqlx.Datatypes.Scalar.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar> args_ = new pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar>();
    /// <summary>
    ///* values for parameters used in filter expression 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Datatypes.Scalar> Args
    {
      get { return args_; }
    }

    /// <summary>Field number for the "limit_expr" field.</summary>
    public const int LimitExprFieldNumber = 7;
    private global::Mysqlx.Crud.LimitExpr limitExpr_;
    /// <summary>
    ///* limits the number of rows to match
    ///(user can set one of: limit, limit_expr) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.LimitExpr LimitExpr
    {
      get { return limitExpr_; }
      set
      {
        limitExpr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Delete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Delete other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Collection, other.Collection)) return false;
      if (DataModel != other.DataModel) return false;
      if (!object.Equals(Criteria, other.Criteria)) return false;
      if (!object.Equals(Limit, other.Limit)) return false;
      if (!order_.Equals(other.order_)) return false;
      if (!args_.Equals(other.args_)) return false;
      if (!object.Equals(LimitExpr, other.LimitExpr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (collection_ != null) hash ^= Collection.GetHashCode();
      if (HasDataModel) hash ^= DataModel.GetHashCode();
      if (criteria_ != null) hash ^= Criteria.GetHashCode();
      if (limit_ != null) hash ^= Limit.GetHashCode();
      hash ^= order_.GetHashCode();
      hash ^= args_.GetHashCode();
      if (limitExpr_ != null) hash ^= LimitExpr.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (collection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasDataModel) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataModel);
      }
      if (criteria_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Criteria);
      }
      if (limit_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Limit);
      }
      order_.WriteTo(output, _repeated_order_codec);
      args_.WriteTo(output, _repeated_args_codec);
      if (limitExpr_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(LimitExpr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (collection_ != null)
      {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasDataModel)
      {
        output.WriteRawTag(16);
        output.WriteEnum((int)DataModel);
      }
      if (criteria_ != null)
      {
        output.WriteRawTag(26);
        output.WriteMessage(Criteria);
      }
      if (limit_ != null)
      {
        output.WriteRawTag(34);
        output.WriteMessage(Limit);
      }
      order_.WriteTo(ref output, _repeated_order_codec);
      args_.WriteTo(ref output, _repeated_args_codec);
      if (limitExpr_ != null)
      {
        output.WriteRawTag(58);
        output.WriteMessage(LimitExpr);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (collection_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (HasDataModel)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)DataModel);
      }
      if (criteria_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Criteria);
      }
      if (limit_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Limit);
      }
      size += order_.CalculateSize(_repeated_order_codec);
      size += args_.CalculateSize(_repeated_args_codec);
      if (limitExpr_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LimitExpr);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Delete other)
    {
      if (other == null)
      {
        return;
      }
      if (other.collection_ != null)
      {
        if (collection_ == null)
        {
          Collection = new global::Mysqlx.Crud.Collection();
        }
        Collection.MergeFrom(other.Collection);
      }
      if (other.HasDataModel)
      {
        DataModel = other.DataModel;
      }
      if (other.criteria_ != null)
      {
        if (criteria_ == null)
        {
          Criteria = new global::Mysqlx.Expr.Expr();
        }
        Criteria.MergeFrom(other.Criteria);
      }
      if (other.limit_ != null)
      {
        if (limit_ == null)
        {
          Limit = new global::Mysqlx.Crud.Limit();
        }
        Limit.MergeFrom(other.Limit);
      }
      order_.Add(other.order_);
      args_.Add(other.args_);
      if (other.limitExpr_ != null)
      {
        if (limitExpr_ == null)
        {
          LimitExpr = new global::Mysqlx.Crud.LimitExpr();
        }
        LimitExpr.MergeFrom(other.LimitExpr);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (collection_ == null) {
              Collection = new global::Mysqlx.Crud.Collection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 16: {
            DataModel = (global::Mysqlx.Crud.DataModel) input.ReadEnum();
            break;
          }
          case 26: {
            if (criteria_ == null) {
              Criteria = new global::Mysqlx.Expr.Expr();
            }
            input.ReadMessage(Criteria);
            break;
          }
          case 34: {
            if (limit_ == null) {
              Limit = new global::Mysqlx.Crud.Limit();
            }
            input.ReadMessage(Limit);
            break;
          }
          case 42: {
            order_.AddEntriesFrom(input, _repeated_order_codec);
            break;
          }
          case 50: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 58: {
            if (limitExpr_ == null) {
              LimitExpr = new global::Mysqlx.Crud.LimitExpr();
            }
            input.ReadMessage(LimitExpr);
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              if (collection_ == null)
              {
                Collection = new global::Mysqlx.Crud.Collection();
              }
              input.ReadMessage(Collection);
              break;
            }
          case 16:
            {
              DataModel = (global::Mysqlx.Crud.DataModel)input.ReadEnum();
              break;
            }
          case 26:
            {
              if (criteria_ == null)
              {
                Criteria = new global::Mysqlx.Expr.Expr();
              }
              input.ReadMessage(Criteria);
              break;
            }
          case 34:
            {
              if (limit_ == null)
              {
                Limit = new global::Mysqlx.Crud.Limit();
              }
              input.ReadMessage(Limit);
              break;
            }
          case 42:
            {
              order_.AddEntriesFrom(ref input, _repeated_order_codec);
              break;
            }
          case 50:
            {
              args_.AddEntriesFrom(ref input, _repeated_args_codec);
              break;
            }
          case 58:
            {
              if (limitExpr_ == null)
              {
                LimitExpr = new global::Mysqlx.Crud.LimitExpr();
              }
              input.ReadMessage(LimitExpr);
              break;
            }
        }
      }
    }
#endif

  }

  /// <summary>
  ///*
  ///CreateView create view based on indicated @ref Mysqlx::Crud::Find message
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CreateView : pb::IMessage<CreateView>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<CreateView> _parser = new pb::MessageParser<CreateView>(() => new CreateView());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateView()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateView(CreateView other) : this()
    {
      _hasBits0 = other._hasBits0;
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      definer_ = other.definer_;
      algorithm_ = other.algorithm_;
      security_ = other.security_;
      check_ = other.check_;
      column_ = other.column_.Clone();
      stmt_ = other.stmt_ != null ? other.stmt_.Clone() : null;
      replaceExisting_ = other.replaceExisting_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateView Clone()
    {
      return new CreateView(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private global::Mysqlx.Crud.Collection collection_;
    /// <summary>
    ///* name of the VIEW object, which should be created 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Collection Collection
    {
      get { return collection_; }
      set
      {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "definer" field.</summary>
    public const int DefinerFieldNumber = 2;
    private readonly static string DefinerDefaultValue = "";

    private string definer_;
    /// <summary>
    ///* user name of the definer, if the value isn't set then the definer
    ///is current user 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Definer
    {
      get { return definer_ ?? DefinerDefaultValue; }
      set
      {
        definer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "definer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefiner
    {
      get { return definer_ != null; }
    }
    /// <summary>Clears the value of the "definer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefiner()
    {
      definer_ = null;
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 3;
    private readonly static global::Mysqlx.Crud.ViewAlgorithm AlgorithmDefaultValue = global::Mysqlx.Crud.ViewAlgorithm.Undefined;

    private global::Mysqlx.Crud.ViewAlgorithm algorithm_;
    /// <summary>
    ///* defines how MySQL Server processes the view 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.ViewAlgorithm Algorithm
    {
      get { if ((_hasBits0 & 1) != 0) { return algorithm_; } else { return AlgorithmDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        algorithm_ = value;
      }
    }
    /// <summary>Gets whether the "algorithm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlgorithm
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "algorithm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlgorithm()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "security" field.</summary>
    public const int SecurityFieldNumber = 4;
    private readonly static global::Mysqlx.Crud.ViewSqlSecurity SecurityDefaultValue = global::Mysqlx.Crud.ViewSqlSecurity.Definer;

    private global::Mysqlx.Crud.ViewSqlSecurity security_;
    /// <summary>
    ///* defines the security context in which the view is going be executed 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.ViewSqlSecurity Security
    {
      get { if ((_hasBits0 & 2) != 0) { return security_; } else { return SecurityDefaultValue; } }
      set
      {
        _hasBits0 |= 2;
        security_ = value;
      }
    }
    /// <summary>Gets whether the "security" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecurity
    {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "security" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecurity()
    {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "check" field.</summary>
    public const int CheckFieldNumber = 5;
    private readonly static global::Mysqlx.Crud.ViewCheckOption CheckDefaultValue = global::Mysqlx.Crud.ViewCheckOption.Local;

    private global::Mysqlx.Crud.ViewCheckOption check_;
    /// <summary>
    ///* limits the write operations done on a VIEW 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.ViewCheckOption Check
    {
      get { if ((_hasBits0 & 4) != 0) { return check_; } else { return CheckDefaultValue; } }
      set
      {
        _hasBits0 |= 4;
        check_ = value;
      }
    }
    /// <summary>Gets whether the "check" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCheck
    {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "check" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCheck()
    {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "column" field.</summary>
    public const int ColumnFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_column_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> column_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* defines the list of aliases for column names specified in `stmt` 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Column
    {
      get { return column_; }
    }

    /// <summary>Field number for the "stmt" field.</summary>
    public const int StmtFieldNumber = 7;
    private global::Mysqlx.Crud.Find stmt_;
    /// <summary>
    ///* Mysqlx.Crud.Find message from which the SELECT statement
    ///is going to be build 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Find Stmt
    {
      get { return stmt_; }
      set
      {
        stmt_ = value;
      }
    }

    /// <summary>Field number for the "replace_existing" field.</summary>
    public const int ReplaceExistingFieldNumber = 8;
    private readonly static bool ReplaceExistingDefaultValue = false;

    private bool replaceExisting_;
    /// <summary>
    ///* if true then suppress error when created view already exists;
    ///just replace it 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ReplaceExisting
    {
      get { if ((_hasBits0 & 8) != 0) { return replaceExisting_; } else { return ReplaceExistingDefaultValue; } }
      set
      {
        _hasBits0 |= 8;
        replaceExisting_ = value;
      }
    }
    /// <summary>Gets whether the "replace_existing" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReplaceExisting
    {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "replace_existing" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReplaceExisting()
    {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as CreateView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateView other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Collection, other.Collection)) return false;
      if (Definer != other.Definer) return false;
      if (Algorithm != other.Algorithm) return false;
      if (Security != other.Security) return false;
      if (Check != other.Check) return false;
      if (!column_.Equals(other.column_)) return false;
      if (!object.Equals(Stmt, other.Stmt)) return false;
      if (ReplaceExisting != other.ReplaceExisting) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (collection_ != null) hash ^= Collection.GetHashCode();
      if (HasDefiner) hash ^= Definer.GetHashCode();
      if (HasAlgorithm) hash ^= Algorithm.GetHashCode();
      if (HasSecurity) hash ^= Security.GetHashCode();
      if (HasCheck) hash ^= Check.GetHashCode();
      hash ^= column_.GetHashCode();
      if (stmt_ != null) hash ^= Stmt.GetHashCode();
      if (HasReplaceExisting) hash ^= ReplaceExisting.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (collection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasDefiner) {
        output.WriteRawTag(18);
        output.WriteString(Definer);
      }
      if (HasAlgorithm) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Algorithm);
      }
      if (HasSecurity) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Security);
      }
      if (HasCheck) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Check);
      }
      column_.WriteTo(output, _repeated_column_codec);
      if (stmt_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Stmt);
      }
      if (HasReplaceExisting) {
        output.WriteRawTag(64);
        output.WriteBool(ReplaceExisting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (collection_ != null)
      {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasDefiner)
      {
        output.WriteRawTag(18);
        output.WriteString(Definer);
      }
      if (HasAlgorithm)
      {
        output.WriteRawTag(24);
        output.WriteEnum((int)Algorithm);
      }
      if (HasSecurity)
      {
        output.WriteRawTag(32);
        output.WriteEnum((int)Security);
      }
      if (HasCheck)
      {
        output.WriteRawTag(40);
        output.WriteEnum((int)Check);
      }
      column_.WriteTo(ref output, _repeated_column_codec);
      if (stmt_ != null)
      {
        output.WriteRawTag(58);
        output.WriteMessage(Stmt);
      }
      if (HasReplaceExisting)
      {
        output.WriteRawTag(64);
        output.WriteBool(ReplaceExisting);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (collection_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (HasDefiner)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Definer);
      }
      if (HasAlgorithm)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Algorithm);
      }
      if (HasSecurity)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Security);
      }
      if (HasCheck)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Check);
      }
      size += column_.CalculateSize(_repeated_column_codec);
      if (stmt_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stmt);
      }
      if (HasReplaceExisting)
      {
        size += 1 + 1;
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateView other)
    {
      if (other == null)
      {
        return;
      }
      if (other.collection_ != null)
      {
        if (collection_ == null)
        {
          Collection = new global::Mysqlx.Crud.Collection();
        }
        Collection.MergeFrom(other.Collection);
      }
      if (other.HasDefiner)
      {
        Definer = other.Definer;
      }
      if (other.HasAlgorithm)
      {
        Algorithm = other.Algorithm;
      }
      if (other.HasSecurity)
      {
        Security = other.Security;
      }
      if (other.HasCheck)
      {
        Check = other.Check;
      }
      column_.Add(other.column_);
      if (other.stmt_ != null)
      {
        if (stmt_ == null)
        {
          Stmt = new global::Mysqlx.Crud.Find();
        }
        Stmt.MergeFrom(other.Stmt);
      }
      if (other.HasReplaceExisting)
      {
        ReplaceExisting = other.ReplaceExisting;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (collection_ == null) {
              Collection = new global::Mysqlx.Crud.Collection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 18: {
            Definer = input.ReadString();
            break;
          }
          case 24: {
            Algorithm = (global::Mysqlx.Crud.ViewAlgorithm) input.ReadEnum();
            break;
          }
          case 32: {
            Security = (global::Mysqlx.Crud.ViewSqlSecurity) input.ReadEnum();
            break;
          }
          case 40: {
            Check = (global::Mysqlx.Crud.ViewCheckOption) input.ReadEnum();
            break;
          }
          case 50: {
            column_.AddEntriesFrom(input, _repeated_column_codec);
            break;
          }
          case 58: {
            if (stmt_ == null) {
              Stmt = new global::Mysqlx.Crud.Find();
            }
            input.ReadMessage(Stmt);
            break;
          }
          case 64: {
            ReplaceExisting = input.ReadBool();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              if (collection_ == null)
              {
                Collection = new global::Mysqlx.Crud.Collection();
              }
              input.ReadMessage(Collection);
              break;
            }
          case 18:
            {
              Definer = input.ReadString();
              break;
            }
          case 24:
            {
              Algorithm = (global::Mysqlx.Crud.ViewAlgorithm)input.ReadEnum();
              break;
            }
          case 32:
            {
              Security = (global::Mysqlx.Crud.ViewSqlSecurity)input.ReadEnum();
              break;
            }
          case 40:
            {
              Check = (global::Mysqlx.Crud.ViewCheckOption)input.ReadEnum();
              break;
            }
          case 50:
            {
              column_.AddEntriesFrom(ref input, _repeated_column_codec);
              break;
            }
          case 58:
            {
              if (stmt_ == null)
              {
                Stmt = new global::Mysqlx.Crud.Find();
              }
              input.ReadMessage(Stmt);
              break;
            }
          case 64:
            {
              ReplaceExisting = input.ReadBool();
              break;
            }
        }
      }
    }
#endif

  }

  /// <summary>
  ///*
  ///ModifyView modify existing view based on indicated
  ///@ref Mysqlx::Crud::Find message
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ModifyView : pb::IMessage<ModifyView>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<ModifyView> _parser = new pb::MessageParser<ModifyView>(() => new ModifyView());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ModifyView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModifyView()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModifyView(ModifyView other) : this()
    {
      _hasBits0 = other._hasBits0;
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      definer_ = other.definer_;
      algorithm_ = other.algorithm_;
      security_ = other.security_;
      check_ = other.check_;
      column_ = other.column_.Clone();
      stmt_ = other.stmt_ != null ? other.stmt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ModifyView Clone()
    {
      return new ModifyView(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private global::Mysqlx.Crud.Collection collection_;
    /// <summary>
    ///* name of the VIEW object, which should be modified 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Collection Collection
    {
      get { return collection_; }
      set
      {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "definer" field.</summary>
    public const int DefinerFieldNumber = 2;
    private readonly static string DefinerDefaultValue = "";

    private string definer_;
    /// <summary>
    ///* user name of the definer,
    ///if the value isn't set then the definer is current user 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Definer
    {
      get { return definer_ ?? DefinerDefaultValue; }
      set
      {
        definer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "definer" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefiner
    {
      get { return definer_ != null; }
    }
    /// <summary>Clears the value of the "definer" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefiner()
    {
      definer_ = null;
    }

    /// <summary>Field number for the "algorithm" field.</summary>
    public const int AlgorithmFieldNumber = 3;
    private readonly static global::Mysqlx.Crud.ViewAlgorithm AlgorithmDefaultValue = global::Mysqlx.Crud.ViewAlgorithm.Undefined;

    private global::Mysqlx.Crud.ViewAlgorithm algorithm_;
    /// <summary>
    ///* defined how MySQL Server processes the view 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.ViewAlgorithm Algorithm
    {
      get { if ((_hasBits0 & 1) != 0) { return algorithm_; } else { return AlgorithmDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        algorithm_ = value;
      }
    }
    /// <summary>Gets whether the "algorithm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAlgorithm
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "algorithm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAlgorithm()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "security" field.</summary>
    public const int SecurityFieldNumber = 4;
    private readonly static global::Mysqlx.Crud.ViewSqlSecurity SecurityDefaultValue = global::Mysqlx.Crud.ViewSqlSecurity.Invoker;

    private global::Mysqlx.Crud.ViewSqlSecurity security_;
    /// <summary>
    ///* defines the security context in which the view is going be executed 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.ViewSqlSecurity Security
    {
      get { if ((_hasBits0 & 2) != 0) { return security_; } else { return SecurityDefaultValue; } }
      set
      {
        _hasBits0 |= 2;
        security_ = value;
      }
    }
    /// <summary>Gets whether the "security" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSecurity
    {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "security" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSecurity()
    {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "check" field.</summary>
    public const int CheckFieldNumber = 5;
    private readonly static global::Mysqlx.Crud.ViewCheckOption CheckDefaultValue = global::Mysqlx.Crud.ViewCheckOption.Local;

    private global::Mysqlx.Crud.ViewCheckOption check_;
    /// <summary>
    ///* limits the write operations done on a VIEW 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.ViewCheckOption Check
    {
      get { if ((_hasBits0 & 4) != 0) { return check_; } else { return CheckDefaultValue; } }
      set
      {
        _hasBits0 |= 4;
        check_ = value;
      }
    }
    /// <summary>Gets whether the "check" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCheck
    {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "check" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCheck()
    {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "column" field.</summary>
    public const int ColumnFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_column_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> column_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* defines the list of aliases for column names specified in `stmt` 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Column
    {
      get { return column_; }
    }

    /// <summary>Field number for the "stmt" field.</summary>
    public const int StmtFieldNumber = 7;
    private global::Mysqlx.Crud.Find stmt_;
    /// <summary>
    ///* Mysqlx.Crud.Find message from which the SELECT statement
    ///is going to be build 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Find Stmt
    {
      get { return stmt_; }
      set
      {
        stmt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as ModifyView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ModifyView other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Collection, other.Collection)) return false;
      if (Definer != other.Definer) return false;
      if (Algorithm != other.Algorithm) return false;
      if (Security != other.Security) return false;
      if (Check != other.Check) return false;
      if (!column_.Equals(other.column_)) return false;
      if (!object.Equals(Stmt, other.Stmt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (collection_ != null) hash ^= Collection.GetHashCode();
      if (HasDefiner) hash ^= Definer.GetHashCode();
      if (HasAlgorithm) hash ^= Algorithm.GetHashCode();
      if (HasSecurity) hash ^= Security.GetHashCode();
      if (HasCheck) hash ^= Check.GetHashCode();
      hash ^= column_.GetHashCode();
      if (stmt_ != null) hash ^= Stmt.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (collection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasDefiner) {
        output.WriteRawTag(18);
        output.WriteString(Definer);
      }
      if (HasAlgorithm) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Algorithm);
      }
      if (HasSecurity) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Security);
      }
      if (HasCheck) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Check);
      }
      column_.WriteTo(output, _repeated_column_codec);
      if (stmt_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Stmt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (collection_ != null)
      {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasDefiner)
      {
        output.WriteRawTag(18);
        output.WriteString(Definer);
      }
      if (HasAlgorithm)
      {
        output.WriteRawTag(24);
        output.WriteEnum((int)Algorithm);
      }
      if (HasSecurity)
      {
        output.WriteRawTag(32);
        output.WriteEnum((int)Security);
      }
      if (HasCheck)
      {
        output.WriteRawTag(40);
        output.WriteEnum((int)Check);
      }
      column_.WriteTo(ref output, _repeated_column_codec);
      if (stmt_ != null)
      {
        output.WriteRawTag(58);
        output.WriteMessage(Stmt);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (collection_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (HasDefiner)
      {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Definer);
      }
      if (HasAlgorithm)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Algorithm);
      }
      if (HasSecurity)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Security);
      }
      if (HasCheck)
      {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Check);
      }
      size += column_.CalculateSize(_repeated_column_codec);
      if (stmt_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stmt);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ModifyView other)
    {
      if (other == null)
      {
        return;
      }
      if (other.collection_ != null)
      {
        if (collection_ == null)
        {
          Collection = new global::Mysqlx.Crud.Collection();
        }
        Collection.MergeFrom(other.Collection);
      }
      if (other.HasDefiner)
      {
        Definer = other.Definer;
      }
      if (other.HasAlgorithm)
      {
        Algorithm = other.Algorithm;
      }
      if (other.HasSecurity)
      {
        Security = other.Security;
      }
      if (other.HasCheck)
      {
        Check = other.Check;
      }
      column_.Add(other.column_);
      if (other.stmt_ != null)
      {
        if (stmt_ == null)
        {
          Stmt = new global::Mysqlx.Crud.Find();
        }
        Stmt.MergeFrom(other.Stmt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (collection_ == null) {
              Collection = new global::Mysqlx.Crud.Collection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 18: {
            Definer = input.ReadString();
            break;
          }
          case 24: {
            Algorithm = (global::Mysqlx.Crud.ViewAlgorithm) input.ReadEnum();
            break;
          }
          case 32: {
            Security = (global::Mysqlx.Crud.ViewSqlSecurity) input.ReadEnum();
            break;
          }
          case 40: {
            Check = (global::Mysqlx.Crud.ViewCheckOption) input.ReadEnum();
            break;
          }
          case 50: {
            column_.AddEntriesFrom(input, _repeated_column_codec);
            break;
          }
          case 58: {
            if (stmt_ == null) {
              Stmt = new global::Mysqlx.Crud.Find();
            }
            input.ReadMessage(Stmt);
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              if (collection_ == null)
              {
                Collection = new global::Mysqlx.Crud.Collection();
              }
              input.ReadMessage(Collection);
              break;
            }
          case 18:
            {
              Definer = input.ReadString();
              break;
            }
          case 24:
            {
              Algorithm = (global::Mysqlx.Crud.ViewAlgorithm)input.ReadEnum();
              break;
            }
          case 32:
            {
              Security = (global::Mysqlx.Crud.ViewSqlSecurity)input.ReadEnum();
              break;
            }
          case 40:
            {
              Check = (global::Mysqlx.Crud.ViewCheckOption)input.ReadEnum();
              break;
            }
          case 50:
            {
              column_.AddEntriesFrom(ref input, _repeated_column_codec);
              break;
            }
          case 58:
            {
              if (stmt_ == null)
              {
                Stmt = new global::Mysqlx.Crud.Find();
              }
              input.ReadMessage(Stmt);
              break;
            }
        }
      }
    }
#endif

  }

  /// <summary>
  ///*
  ///DropView removing existing view
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DropView : pb::IMessage<DropView>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<DropView> _parser = new pb::MessageParser<DropView>(() => new DropView());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DropView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DropView()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DropView(DropView other) : this()
    {
      _hasBits0 = other._hasBits0;
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      ifExists_ = other.ifExists_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DropView Clone()
    {
      return new DropView(this);
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 1;
    private global::Mysqlx.Crud.Collection collection_;
    /// <summary>
    ///* name of the VIEW object, which should be deleted 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Crud.Collection Collection
    {
      get { return collection_; }
      set
      {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "if_exists" field.</summary>
    public const int IfExistsFieldNumber = 2;
    private readonly static bool IfExistsDefaultValue = false;

    private bool ifExists_;
    /// <summary>
    ///* if true then suppress error when deleted view does not exists 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IfExists
    {
      get { if ((_hasBits0 & 1) != 0) { return ifExists_; } else { return IfExistsDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        ifExists_ = value;
      }
    }
    /// <summary>Gets whether the "if_exists" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIfExists
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "if_exists" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIfExists()
    {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as DropView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DropView other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (!object.Equals(Collection, other.Collection)) return false;
      if (IfExists != other.IfExists) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (collection_ != null) hash ^= Collection.GetHashCode();
      if (HasIfExists) hash ^= IfExists.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (collection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasIfExists) {
        output.WriteRawTag(16);
        output.WriteBool(IfExists);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (collection_ != null)
      {
        output.WriteRawTag(10);
        output.WriteMessage(Collection);
      }
      if (HasIfExists)
      {
        output.WriteRawTag(16);
        output.WriteBool(IfExists);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (collection_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      if (HasIfExists)
      {
        size += 1 + 1;
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DropView other)
    {
      if (other == null)
      {
        return;
      }
      if (other.collection_ != null)
      {
        if (collection_ == null)
        {
          Collection = new global::Mysqlx.Crud.Collection();
        }
        Collection.MergeFrom(other.Collection);
      }
      if (other.HasIfExists)
      {
        IfExists = other.IfExists;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (collection_ == null) {
              Collection = new global::Mysqlx.Crud.Collection();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 16: {
            IfExists = input.ReadBool();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
            {
              if (collection_ == null)
              {
                Collection = new global::Mysqlx.Crud.Collection();
              }
              input.ReadMessage(Collection);
              break;
            }
          case 16:
            {
              IfExists = input.ReadBool();
              break;
            }
        }
      }
    }
#endif

  }

  #endregion

}

#endregion Designer generated code
