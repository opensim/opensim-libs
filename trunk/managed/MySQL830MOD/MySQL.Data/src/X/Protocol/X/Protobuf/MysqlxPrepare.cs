// Copyright (c) 2022, 2023, Oracle and/or its affiliates.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License, version 2.0, as
// published by the Free Software Foundation.
//
// This program is also distributed with certain software (including
// but not limited to OpenSSL) that is licensed under separate terms,
// as designated in a particular file or component or in included license
// documentation. The authors of MySQL hereby grant you an
// additional permission to link the program and your derivative works
// with the separately licensed software that they have included with
// MySQL.
//
// Without limiting anything contained in the foregoing, this file,
// which is part of MySQL Connector/NET, is also subject to the
// Universal FOSS Exception, version 1.0, a copy of which can be found at
// http://oss.oracle.com/licenses/universal-foss-exception.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License, version 2.0, for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mysqlx_prepare.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mysqlx.Prepare
{

  /// <summary>Holder for reflection information generated from mysqlx_prepare.proto</summary>
  public static partial class MysqlxPrepareReflection
  {

    #region Descriptor
    /// <summary>File descriptor for mysqlx_prepare.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MysqlxPrepareReflection()
    {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRteXNxbHhfcHJlcGFyZS5wcm90bxIOTXlzcWx4LlByZXBhcmUaDG15c3Fs",
            "eC5wcm90bxoQbXlzcWx4X3NxbC5wcm90bxoRbXlzcWx4X2NydWQucHJvdG8a",
            "Fm15c3FseF9kYXRhdHlwZXMucHJvdG8inQMKB1ByZXBhcmUSDwoHc3RtdF9p",
            "ZBgBIAIoDRIyCgRzdG10GAIgAigLMiQuTXlzcWx4LlByZXBhcmUuUHJlcGFy",
            "ZS5PbmVPZk1lc3NhZ2UaxgIKDE9uZU9mTWVzc2FnZRI3CgR0eXBlGAEgAigO",
            "MikuTXlzcWx4LlByZXBhcmUuUHJlcGFyZS5PbmVPZk1lc3NhZ2UuVHlwZRIf",
            "CgRmaW5kGAIgASgLMhEuTXlzcWx4LkNydWQuRmluZBIjCgZpbnNlcnQYAyAB",
            "KAsyEy5NeXNxbHguQ3J1ZC5JbnNlcnQSIwoGdXBkYXRlGAQgASgLMhMuTXlz",
            "cWx4LkNydWQuVXBkYXRlEiMKBmRlbGV0ZRgFIAEoCzITLk15c3FseC5DcnVk",
            "LkRlbGV0ZRItCgxzdG10X2V4ZWN1dGUYBiABKAsyFy5NeXNxbHguU3FsLlN0",
            "bXRFeGVjdXRlIj4KBFR5cGUSCAoERklORBAAEgoKBklOU0VSVBABEgoKBlVQ",
            "REFURRACEgoKBkRFTEVURRAEEggKBFNUTVQQBToEiOowKCJmCgdFeGVjdXRl",
            "Eg8KB3N0bXRfaWQYASACKA0SIwoEYXJncxgCIAMoCzIVLk15c3FseC5EYXRh",
            "dHlwZXMuQW55Eh8KEGNvbXBhY3RfbWV0YWRhdGEYAyABKAg6BWZhbHNlOgSI",
            "6jApIiMKCkRlYWxsb2NhdGUSDwoHc3RtdF9pZBgBIAIoDToEiOowKkIZChdj",
            "b20ubXlzcWwuY2oueC5wcm90b2J1Zg=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mysqlx.MysqlxReflection.Descriptor, global::Mysqlx.Sql.MysqlxSqlReflection.Descriptor, global::Mysqlx.Crud.MysqlxCrudReflection.Descriptor, global::Mysqlx.Datatypes.MysqlxDatatypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Prepare.Prepare), global::Mysqlx.Prepare.Prepare.Parser, new[]{ "StmtId", "Stmt" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Prepare.Prepare.Types.OneOfMessage), global::Mysqlx.Prepare.Prepare.Types.OneOfMessage.Parser, new[]{ "Type", "Find", "Insert", "Update", "Delete", "StmtExecute" }, null, new[]{ typeof(global::Mysqlx.Prepare.Prepare.Types.OneOfMessage.Types.Type) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Prepare.Execute), global::Mysqlx.Prepare.Execute.Parser, new[]{ "StmtId", "Args", "CompactMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Prepare.Deallocate), global::Mysqlx.Prepare.Deallocate.Parser, new[]{ "StmtId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  ///Prepare a new statement
  ///
  ///@startuml
  ///client -> server: Prepare
  ///alt Success
  ///client &lt;- server: Ok
  ///else Failure
  ///client &lt;- server: Error
  ///end
  ///@enduml
  ///
  ///@returns @ref Mysqlx::Ok or @ref Mysqlx::Error
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Prepare : pb::IMessage<Prepare>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Prepare> _parser = new pb::MessageParser<Prepare>(() => new Prepare());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Prepare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Prepare.MysqlxPrepareReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Prepare()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Prepare(Prepare other) : this()
    {
      _hasBits0 = other._hasBits0;
      stmtId_ = other.stmtId_;
      stmt_ = other.stmt_ != null ? other.stmt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Prepare Clone()
    {
      return new Prepare(this);
    }

    /// <summary>Field number for the "stmt_id" field.</summary>
    public const int StmtIdFieldNumber = 1;
    private readonly static uint StmtIdDefaultValue = 0;

    private uint stmtId_;
    /// <summary>
    ///* client-side assigned statement ID, which is going to identify
    ///the result of preparation 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StmtId
    {
      get { if ((_hasBits0 & 1) != 0) { return stmtId_; } else { return StmtIdDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        stmtId_ = value;
      }
    }
    /// <summary>Gets whether the "stmt_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStmtId
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stmt_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStmtId()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "stmt" field.</summary>
    public const int StmtFieldNumber = 2;
    private global::Mysqlx.Prepare.Prepare.Types.OneOfMessage stmt_;
    /// <summary>
    ///* defines one of following messages to be prepared:
    ///Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mysqlx.Prepare.Prepare.Types.OneOfMessage Stmt
    {
      get { return stmt_; }
      set
      {
        stmt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Prepare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Prepare other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (StmtId != other.StmtId) return false;
      if (!object.Equals(Stmt, other.Stmt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (HasStmtId) hash ^= StmtId.GetHashCode();
      if (stmt_ != null) hash ^= Stmt.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (HasStmtId) {
        output.WriteRawTag(8);
        output.WriteUInt32(StmtId);
      }
      if (stmt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Stmt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (HasStmtId)
      {
        output.WriteRawTag(8);
        output.WriteUInt32(StmtId);
      }
      if (stmt_ != null)
      {
        output.WriteRawTag(18);
        output.WriteMessage(Stmt);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (HasStmtId)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StmtId);
      }
      if (stmt_ != null)
      {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stmt);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Prepare other)
    {
      if (other == null)
      {
        return;
      }
      if (other.HasStmtId)
      {
        StmtId = other.StmtId;
      }
      if (other.stmt_ != null)
      {
        if (stmt_ == null)
        {
          Stmt = new global::Mysqlx.Prepare.Prepare.Types.OneOfMessage();
        }
        Stmt.MergeFrom(other.Stmt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StmtId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (stmt_ == null) {
              Stmt = new global::Mysqlx.Prepare.Prepare.Types.OneOfMessage();
            }
            input.ReadMessage(Stmt);
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8:
            {
              StmtId = input.ReadUInt32();
              break;
            }
          case 18:
            {
              if (stmt_ == null)
              {
                Stmt = new global::Mysqlx.Prepare.Prepare.Types.OneOfMessage();
              }
              input.ReadMessage(Stmt);
              break;
            }
        }
      }
    }
#endif

    #region Nested types
    /// <summary>Container for nested types declared in the Prepare message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types
    {
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class OneOfMessage : pb::IMessage<OneOfMessage>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
#endif
      {
        private static readonly pb::MessageParser<OneOfMessage> _parser = new pb::MessageParser<OneOfMessage>(() => new OneOfMessage());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<OneOfMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor
        {
          get { return global::Mysqlx.Prepare.Prepare.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OneOfMessage()
        {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OneOfMessage(OneOfMessage other) : this()
        {
          _hasBits0 = other._hasBits0;
          type_ = other.type_;
          find_ = other.find_ != null ? other.find_.Clone() : null;
          insert_ = other.insert_ != null ? other.insert_.Clone() : null;
          update_ = other.update_ != null ? other.update_.Clone() : null;
          delete_ = other.delete_ != null ? other.delete_.Clone() : null;
          stmtExecute_ = other.stmtExecute_ != null ? other.stmtExecute_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OneOfMessage Clone()
        {
          return new OneOfMessage(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private readonly static global::Mysqlx.Prepare.Prepare.Types.OneOfMessage.Types.Type TypeDefaultValue = global::Mysqlx.Prepare.Prepare.Types.OneOfMessage.Types.Type.Find;

        private global::Mysqlx.Prepare.Prepare.Types.OneOfMessage.Types.Type type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mysqlx.Prepare.Prepare.Types.OneOfMessage.Types.Type Type
        {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set
          {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasType
        {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearType()
        {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "find" field.</summary>
        public const int FindFieldNumber = 2;
        private global::Mysqlx.Crud.Find find_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mysqlx.Crud.Find Find
        {
          get { return find_; }
          set
          {
            find_ = value;
          }
        }

        /// <summary>Field number for the "insert" field.</summary>
        public const int InsertFieldNumber = 3;
        private global::Mysqlx.Crud.Insert insert_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mysqlx.Crud.Insert Insert
        {
          get { return insert_; }
          set
          {
            insert_ = value;
          }
        }

        /// <summary>Field number for the "update" field.</summary>
        public const int UpdateFieldNumber = 4;
        private global::Mysqlx.Crud.Update update_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mysqlx.Crud.Update Update
        {
          get { return update_; }
          set
          {
            update_ = value;
          }
        }

        /// <summary>Field number for the "delete" field.</summary>
        public const int DeleteFieldNumber = 5;
        private global::Mysqlx.Crud.Delete delete_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mysqlx.Crud.Delete Delete
        {
          get { return delete_; }
          set
          {
            delete_ = value;
          }
        }

        /// <summary>Field number for the "stmt_execute" field.</summary>
        public const int StmtExecuteFieldNumber = 6;
        private global::Mysqlx.Sql.StmtExecute stmtExecute_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mysqlx.Sql.StmtExecute StmtExecute
        {
          get { return stmtExecute_; }
          set
          {
            stmtExecute_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other)
        {
          return Equals(other as OneOfMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(OneOfMessage other)
        {
          if (ReferenceEquals(other, null))
          {
            return false;
          }
          if (ReferenceEquals(other, this))
          {
            return true;
          }
          if (Type != other.Type) return false;
          if (!object.Equals(Find, other.Find)) return false;
          if (!object.Equals(Insert, other.Insert)) return false;
          if (!object.Equals(Update, other.Update)) return false;
          if (!object.Equals(Delete, other.Delete)) return false;
          if (!object.Equals(StmtExecute, other.StmtExecute)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode()
        {
          int hash = 1;
          if (HasType) hash ^= Type.GetHashCode();
          if (find_ != null) hash ^= Find.GetHashCode();
          if (insert_ != null) hash ^= Insert.GetHashCode();
          if (update_ != null) hash ^= Update.GetHashCode();
          if (delete_ != null) hash ^= Delete.GetHashCode();
          if (stmtExecute_ != null) hash ^= StmtExecute.GetHashCode();
          if (_unknownFields != null)
          {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString()
        {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
#else
          if (HasType) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (find_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Find);
          }
          if (insert_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Insert);
          }
          if (update_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Update);
          }
          if (delete_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Delete);
          }
          if (stmtExecute_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(StmtExecute);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
          if (HasType)
          {
            output.WriteRawTag(8);
            output.WriteEnum((int)Type);
          }
          if (find_ != null)
          {
            output.WriteRawTag(18);
            output.WriteMessage(Find);
          }
          if (insert_ != null)
          {
            output.WriteRawTag(26);
            output.WriteMessage(Insert);
          }
          if (update_ != null)
          {
            output.WriteRawTag(34);
            output.WriteMessage(Update);
          }
          if (delete_ != null)
          {
            output.WriteRawTag(42);
            output.WriteMessage(Delete);
          }
          if (stmtExecute_ != null)
          {
            output.WriteRawTag(50);
            output.WriteMessage(StmtExecute);
          }
          if (_unknownFields != null)
          {
            _unknownFields.WriteTo(ref output);
          }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize()
        {
          int size = 0;
          if (HasType)
          {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
          }
          if (find_ != null)
          {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Find);
          }
          if (insert_ != null)
          {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Insert);
          }
          if (update_ != null)
          {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
          }
          if (delete_ != null)
          {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delete);
          }
          if (stmtExecute_ != null)
          {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StmtExecute);
          }
          if (_unknownFields != null)
          {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(OneOfMessage other)
        {
          if (other == null)
          {
            return;
          }
          if (other.HasType)
          {
            Type = other.Type;
          }
          if (other.find_ != null)
          {
            if (find_ == null)
            {
              Find = new global::Mysqlx.Crud.Find();
            }
            Find.MergeFrom(other.Find);
          }
          if (other.insert_ != null)
          {
            if (insert_ == null)
            {
              Insert = new global::Mysqlx.Crud.Insert();
            }
            Insert.MergeFrom(other.Insert);
          }
          if (other.update_ != null)
          {
            if (update_ == null)
            {
              Update = new global::Mysqlx.Crud.Update();
            }
            Update.MergeFrom(other.Update);
          }
          if (other.delete_ != null)
          {
            if (delete_ == null)
            {
              Delete = new global::Mysqlx.Crud.Delete();
            }
            Delete.MergeFrom(other.Delete);
          }
          if (other.stmtExecute_ != null)
          {
            if (stmtExecute_ == null)
            {
              StmtExecute = new global::Mysqlx.Sql.StmtExecute();
            }
            StmtExecute.MergeFrom(other.StmtExecute);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
#else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::Mysqlx.Prepare.Prepare.Types.OneOfMessage.Types.Type) input.ReadEnum();
                break;
              }
              case 18: {
                if (find_ == null) {
                  Find = new global::Mysqlx.Crud.Find();
                }
                input.ReadMessage(Find);
                break;
              }
              case 26: {
                if (insert_ == null) {
                  Insert = new global::Mysqlx.Crud.Insert();
                }
                input.ReadMessage(Insert);
                break;
              }
              case 34: {
                if (update_ == null) {
                  Update = new global::Mysqlx.Crud.Update();
                }
                input.ReadMessage(Update);
                break;
              }
              case 42: {
                if (delete_ == null) {
                  Delete = new global::Mysqlx.Crud.Delete();
                }
                input.ReadMessage(Delete);
                break;
              }
              case 50: {
                if (stmtExecute_ == null) {
                  StmtExecute = new global::Mysqlx.Sql.StmtExecute();
                }
                input.ReadMessage(StmtExecute);
                break;
              }
            }
          }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
          uint tag;
          while ((tag = input.ReadTag()) != 0)
          {
            switch (tag)
            {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8:
                {
                  Type = (global::Mysqlx.Prepare.Prepare.Types.OneOfMessage.Types.Type)input.ReadEnum();
                  break;
                }
              case 18:
                {
                  if (find_ == null)
                  {
                    Find = new global::Mysqlx.Crud.Find();
                  }
                  input.ReadMessage(Find);
                  break;
                }
              case 26:
                {
                  if (insert_ == null)
                  {
                    Insert = new global::Mysqlx.Crud.Insert();
                  }
                  input.ReadMessage(Insert);
                  break;
                }
              case 34:
                {
                  if (update_ == null)
                  {
                    Update = new global::Mysqlx.Crud.Update();
                  }
                  input.ReadMessage(Update);
                  break;
                }
              case 42:
                {
                  if (delete_ == null)
                  {
                    Delete = new global::Mysqlx.Crud.Delete();
                  }
                  input.ReadMessage(Delete);
                  break;
                }
              case 50:
                {
                  if (stmtExecute_ == null)
                  {
                    StmtExecute = new global::Mysqlx.Sql.StmtExecute();
                  }
                  input.ReadMessage(StmtExecute);
                  break;
                }
            }
          }
        }
#endif

        #region Nested types
        /// <summary>Container for nested types declared in the OneOfMessage message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types
        {
          /// <summary>
          /// Determine which of optional fields was set by the client
          /// (Workaround for missing "oneof" keyword in pb2.5)
          /// </summary>
          public enum Type
          {
            [pbr::OriginalName("FIND")] Find = 0,
            [pbr::OriginalName("INSERT")] Insert = 1,
            [pbr::OriginalName("UPDATE")] Update = 2,
            [pbr::OriginalName("DELETE")] Delete = 4,
            [pbr::OriginalName("STMT")] Stmt = 5,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  ///*
  ///Execute already-prepared statement
  ///
  ///@startuml
  ///
  ///client -> server: Execute
  ///alt Success
  ///... Resultsets...
  ///client &lt;- server: StmtExecuteOk
  ///else Failure
  ///client &lt;- server: Error
  ///end
  ///@enduml
  ///@returns @ref Mysqlx::Ok
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Execute : pb::IMessage<Execute>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Execute> _parser = new pb::MessageParser<Execute>(() => new Execute());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Execute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Prepare.MysqlxPrepareReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Execute()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Execute(Execute other) : this()
    {
      _hasBits0 = other._hasBits0;
      stmtId_ = other.stmtId_;
      args_ = other.args_.Clone();
      compactMetadata_ = other.compactMetadata_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Execute Clone()
    {
      return new Execute(this);
    }

    /// <summary>Field number for the "stmt_id" field.</summary>
    public const int StmtIdFieldNumber = 1;
    private readonly static uint StmtIdDefaultValue = 0;

    private uint stmtId_;
    /// <summary>
    ///* client-side assigned statement ID, must be already prepared 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StmtId
    {
      get { if ((_hasBits0 & 1) != 0) { return stmtId_; } else { return StmtIdDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        stmtId_ = value;
      }
    }
    /// <summary>Gets whether the "stmt_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStmtId
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stmt_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStmtId()
    {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Mysqlx.Datatypes.Any> _repeated_args_codec
        = pb::FieldCodec.ForMessage(18, global::Mysqlx.Datatypes.Any.Parser);
    private readonly pbc::RepeatedField<global::Mysqlx.Datatypes.Any> args_ = new pbc::RepeatedField<global::Mysqlx.Datatypes.Any>();
    /// <summary>
    ///* Arguments to bind to the prepared statement 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mysqlx.Datatypes.Any> Args
    {
      get { return args_; }
    }

    /// <summary>Field number for the "compact_metadata" field.</summary>
    public const int CompactMetadataFieldNumber = 3;
    private readonly static bool CompactMetadataDefaultValue = false;

    private bool compactMetadata_;
    /// <summary>
    ///* send only type information for
    ///@ref Mysqlx::Resultset::ColumnMetaData, skipping names and others 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CompactMetadata
    {
      get { if ((_hasBits0 & 2) != 0) { return compactMetadata_; } else { return CompactMetadataDefaultValue; } }
      set
      {
        _hasBits0 |= 2;
        compactMetadata_ = value;
      }
    }
    /// <summary>Gets whether the "compact_metadata" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCompactMetadata
    {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "compact_metadata" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCompactMetadata()
    {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Execute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Execute other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (StmtId != other.StmtId) return false;
      if (!args_.Equals(other.args_)) return false;
      if (CompactMetadata != other.CompactMetadata) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (HasStmtId) hash ^= StmtId.GetHashCode();
      hash ^= args_.GetHashCode();
      if (HasCompactMetadata) hash ^= CompactMetadata.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (HasStmtId) {
        output.WriteRawTag(8);
        output.WriteUInt32(StmtId);
      }
      args_.WriteTo(output, _repeated_args_codec);
      if (HasCompactMetadata) {
        output.WriteRawTag(24);
        output.WriteBool(CompactMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (HasStmtId)
      {
        output.WriteRawTag(8);
        output.WriteUInt32(StmtId);
      }
      args_.WriteTo(ref output, _repeated_args_codec);
      if (HasCompactMetadata)
      {
        output.WriteRawTag(24);
        output.WriteBool(CompactMetadata);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (HasStmtId)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StmtId);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      if (HasCompactMetadata)
      {
        size += 1 + 1;
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Execute other)
    {
      if (other == null)
      {
        return;
      }
      if (other.HasStmtId)
      {
        StmtId = other.StmtId;
      }
      args_.Add(other.args_);
      if (other.HasCompactMetadata)
      {
        CompactMetadata = other.CompactMetadata;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StmtId = input.ReadUInt32();
            break;
          }
          case 18: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 24: {
            CompactMetadata = input.ReadBool();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8:
            {
              StmtId = input.ReadUInt32();
              break;
            }
          case 18:
            {
              args_.AddEntriesFrom(ref input, _repeated_args_codec);
              break;
            }
          case 24:
            {
              CompactMetadata = input.ReadBool();
              break;
            }
        }
      }
    }
#endif

  }

  /// <summary>
  ///*
  ///Deallocate already-prepared statement
  ///
  ///@startuml
  ///client -> server: Deallocate
  ///alt Success
  ///client &lt;- server: Ok
  ///else Failure
  ///client &lt;- server: Error
  ///end
  ///@enduml
  ///
  ///@returns @ref Mysqlx::Ok or @ref Mysqlx::Error
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Deallocate : pb::IMessage<Deallocate>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
#endif
  {
    private static readonly pb::MessageParser<Deallocate> _parser = new pb::MessageParser<Deallocate>(() => new Deallocate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Deallocate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
      get { return global::Mysqlx.Prepare.MysqlxPrepareReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Deallocate()
    {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Deallocate(Deallocate other) : this()
    {
      _hasBits0 = other._hasBits0;
      stmtId_ = other.stmtId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Deallocate Clone()
    {
      return new Deallocate(this);
    }

    /// <summary>Field number for the "stmt_id" field.</summary>
    public const int StmtIdFieldNumber = 1;
    private readonly static uint StmtIdDefaultValue = 0;

    private uint stmtId_;
    /// <summary>
    ///* client-side assigned statement ID, must be already prepared 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint StmtId
    {
      get { if ((_hasBits0 & 1) != 0) { return stmtId_; } else { return StmtIdDefaultValue; } }
      set
      {
        _hasBits0 |= 1;
        stmtId_ = value;
      }
    }
    /// <summary>Gets whether the "stmt_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStmtId
    {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "stmt_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStmtId()
    {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
      return Equals(other as Deallocate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Deallocate other)
    {
      if (ReferenceEquals(other, null))
      {
        return false;
      }
      if (ReferenceEquals(other, this))
      {
        return true;
      }
      if (StmtId != other.StmtId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
      int hash = 1;
      if (HasStmtId) hash ^= StmtId.GetHashCode();
      if (_unknownFields != null)
      {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
#else
      if (HasStmtId) {
        output.WriteRawTag(8);
        output.WriteUInt32(StmtId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
      if (HasStmtId)
      {
        output.WriteRawTag(8);
        output.WriteUInt32(StmtId);
      }
      if (_unknownFields != null)
      {
        _unknownFields.WriteTo(ref output);
      }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
      int size = 0;
      if (HasStmtId)
      {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StmtId);
      }
      if (_unknownFields != null)
      {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Deallocate other)
    {
      if (other == null)
      {
        return;
      }
      if (other.HasStmtId)
      {
        StmtId = other.StmtId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StmtId = input.ReadUInt32();
            break;
          }
        }
      }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
      uint tag;
      while ((tag = input.ReadTag()) != 0)
      {
        switch (tag)
        {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8:
            {
              StmtId = input.ReadUInt32();
              break;
            }
        }
      }
    }
#endif

  }

  #endregion

}

#endregion Designer generated code
